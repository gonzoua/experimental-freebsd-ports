--- src/plugins/generic/generic.pro.orig	2016-03-08 12:44:20.320089000 -0800
+++ src/plugins/generic/generic.pro	2016-03-08 12:49:45.899424000 -0800
@@ -17,3 +17,7 @@
 contains(QT_CONFIG, libinput) {
     SUBDIRS += libinput
 }
+
+freebsd {
+    SUBDIRS += bsdkeyboard bsdsysmouse
+}
diff -Naur src/plugins/generic/bsdkeyboard.orig/bsdkeyboard.json src/plugins/generic/bsdkeyboard/bsdkeyboard.json
--- src/plugins/generic/bsdkeyboard.orig/bsdkeyboard.json	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/generic/bsdkeyboard/bsdkeyboard.json	2016-03-08 12:43:58.413371000 -0800
@@ -0,0 +1,3 @@
+{
+    "Keys": [ "BsdKeyboard" ]
+}
diff -Naur src/plugins/generic/bsdkeyboard.orig/bsdkeyboard.pro src/plugins/generic/bsdkeyboard/bsdkeyboard.pro
--- src/plugins/generic/bsdkeyboard.orig/bsdkeyboard.pro	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/generic/bsdkeyboard/bsdkeyboard.pro	2016-03-08 12:43:58.413444000 -0800
@@ -0,0 +1,16 @@
+TARGET = qbsdkeyboardplugin
+
+PLUGIN_TYPE = generic
+PLUGIN_EXTENDS = -
+PLUGIN_CLASS_NAME = QBsdKeyboardPlugin
+load(qt_plugin)
+
+QT += core gui-private
+
+HEADERS = qbsdkeyboard.h
+SOURCES = main.cpp \
+         qbsdkeyboard.cpp
+
+OTHER_FILES += \
+    qbsdkeyboard.json
+
diff -Naur src/plugins/generic/bsdkeyboard.orig/main.cpp src/plugins/generic/bsdkeyboard/main.cpp
--- src/plugins/generic/bsdkeyboard.orig/main.cpp	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/generic/bsdkeyboard/main.cpp	2016-03-08 12:43:58.413531000 -0800
@@ -0,0 +1,66 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the plugins of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights. These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtGui/qgenericplugin.h>
+#include "qbsdkeyboard.h"
+
+QT_BEGIN_NAMESPACE
+
+class QBsdKeyboardPlugin : public QGenericPlugin
+{
+    Q_OBJECT
+    Q_PLUGIN_METADATA(IID "org.qt-project.Qt.QGenericPluginFactoryInterface" FILE "bsdkeyboard.json")
+
+public:
+    QBsdKeyboardPlugin();
+
+    QObject* create(const QString &key, const QString &specification);
+};
+
+QBsdKeyboardPlugin::QBsdKeyboardPlugin()
+    : QGenericPlugin()
+{
+}
+
+QObject* QBsdKeyboardPlugin::create(const QString &key,
+                                   const QString &specification)
+{
+    if (!key.compare(QLatin1String("BsdKeyboard"), Qt::CaseInsensitive)) {
+        return new QBsdKeyboardHandler(key, specification);
+    }
+    return 0;
+}
+
+QT_END_NAMESPACE
+
+#include "main.moc"
diff -Naur src/plugins/generic/bsdkeyboard.orig/qbsdkeyboard.cpp src/plugins/generic/bsdkeyboard/qbsdkeyboard.cpp
--- src/plugins/generic/bsdkeyboard.orig/qbsdkeyboard.cpp	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/generic/bsdkeyboard/qbsdkeyboard.cpp	2016-03-08 12:43:58.413692000 -0800
@@ -0,0 +1,592 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights. These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+
+#include "qbsdkeyboard.h"
+
+
+#include <QSocketNotifier>
+#include <QStringList>
+#include <QPoint>
+#include <QGuiApplication>
+#include <qpa/qwindowsysteminterface.h>
+
+#include <errno.h>
+
+#include <qdebug.h>
+
+#include <fcntl.h>
+#include <unistd.h>
+
+#include <termios.h>
+#include <sys/kbio.h>
+
+// #define QT_QPA_KEYMAP_DEBUG
+
+#ifdef QT_QPA_KEYMAP_DEBUG
+#include <qdebug.h>
+#endif
+
+QT_BEGIN_NAMESPACE
+
+#include "qbsdkeyboard_defaultmap.h"
+
+QBsdKeyboardHandler::QBsdKeyboardHandler(const QString &key,
+                                                 const QString &specification)
+    : m_notify(0), m_kbd_orig_tty(0), m_should_close(false),
+      m_modifiers(0), m_composing(0), m_dead_unicode(0xffff),
+      m_no_zap(true), m_do_compose(false),
+      m_keymap(0), m_keymap_size(0), m_keycompose(0), m_keycompose_size(0)
+
+{
+    Q_UNUSED(key);
+    QString device;
+    QString keymapFile;
+
+    // qDebug() << "QBsdKeyboardHandler" << key << specification;
+    setObjectName(QLatin1String("BSD Keyboard Handler"));
+
+    if (specification.startsWith("/dev/"))
+        device = specification.toLocal8Bit();
+
+    if (device.isEmpty()) {
+        device = QByteArrayLiteral("STDIN");
+        m_fd = fileno(stdin);
+    } 
+    else {
+        m_fd = open(device.toLatin1(), O_RDONLY);
+        if (!m_fd) {
+            qErrnoWarning(errno, "open(%s) failed", (const char*)device.toLatin1());
+            return;
+        }
+        m_should_close = true;
+    }
+
+    if (::ioctl(m_fd, KDGKBMODE, &m_orig_kbd_mode)) {
+        qErrnoWarning(errno, "ioctl(%s, KDGKBMODE) failed", (const char*)device.toLatin1());
+        revertTTYSettings();
+        return;
+    }
+
+    if (::ioctl(m_fd, KDSKBMODE, K_CODE) < 0) {
+        qErrnoWarning(errno, "ioctl(%s, KDSKBMODE) failed", (const char*)device.toLatin1());
+        revertTTYSettings();
+        return;
+    }
+
+    struct termios kbdtty;
+    if (tcgetattr(m_fd, &kbdtty) == 0) {
+
+        m_kbd_orig_tty = new struct termios;
+        *m_kbd_orig_tty = kbdtty;
+
+        kbdtty.c_iflag = IGNPAR | IGNBRK;
+        kbdtty.c_oflag = 0;
+        kbdtty.c_cflag = CREAD | CS8;
+        kbdtty.c_lflag = 0;
+        kbdtty.c_cc[VTIME] = 0;
+        kbdtty.c_cc[VMIN] = 1;
+        cfsetispeed(&kbdtty, 9600);
+        cfsetospeed(&kbdtty, 9600);
+        if (tcsetattr(m_fd, TCSANOW, &kbdtty) < 0) {
+            qErrnoWarning(errno, "tcsetattr(%s) failed", (const char*)device.toLatin1());
+            revertTTYSettings();
+            return;
+        }
+    } else {
+        qErrnoWarning(errno, "tcgetattr(%s) failed", (const char*)device.toLatin1());
+        revertTTYSettings();
+        return;
+    }
+
+    if (fcntl(m_fd, F_SETFL, O_NONBLOCK)) {
+        qErrnoWarning(errno, "fcntl(%s, F_SETFL, O_NONBLOCK) failed", (const char*)device.toLatin1());
+        revertTTYSettings();
+        return;
+    }
+
+    if (keymapFile.isEmpty() || !loadKeymap(keymapFile))
+        unloadKeymap();
+
+    if (m_fd >= 0) {
+        m_notify = new QSocketNotifier(m_fd, QSocketNotifier::Read, this);
+        connect(m_notify, SIGNAL(activated(int)), this, SLOT(readKeyboardData()));
+    } else {
+        qWarning("Cannot open keyboard input device '%s': %s", (const char*)device.toLatin1(), strerror(errno));
+    }
+}
+
+
+QBsdKeyboardHandler::~QBsdKeyboardHandler()
+{
+    revertTTYSettings();
+}
+
+void QBsdKeyboardHandler::revertTTYSettings()
+{
+    if (m_fd >= 0) {
+        if (m_kbd_orig_tty != 0) {
+            ::tcsetattr(m_fd, TCSANOW, m_kbd_orig_tty);
+            delete m_kbd_orig_tty;
+            m_kbd_orig_tty = 0;
+        }
+
+        ::ioctl(m_fd, KDSKBMODE, m_orig_kbd_mode);
+        if (m_should_close)
+            close(m_fd);
+    }
+}
+
+void QBsdKeyboardHandler::readKeyboardData()
+{
+    uint8_t buffer[32];
+
+    forever {
+        int result = ::read(m_fd, buffer, sizeof(buffer));
+
+        if (result == 0) {
+            qWarning("Got EOF from the input device.");
+            return;
+        } else if (result < 0) {
+            if (errno != EINTR && errno != EAGAIN) {
+                qWarning("Could not read from input device: %s", strerror(errno));
+                return;
+            }
+            else
+                break;
+        }
+
+        for (int i = 0; i < result; ++i) {
+            quint16 code = buffer[i] & 0x7f;
+            bool pressed = (buffer[i] & 0x80) ? false : true;
+
+            QBsdKeyboardHandler::KeycodeAction ka;
+            ka = processKeycode(code, pressed, false);
+
+            switch (ka) {
+            case QBsdKeyboardHandler::CapsLockOn:
+            case QBsdKeyboardHandler::CapsLockOff:
+                switchLed(LED_CAP, ka == QBsdKeyboardHandler::CapsLockOn);
+                break;
+
+            case QBsdKeyboardHandler::NumLockOn:
+            case QBsdKeyboardHandler::NumLockOff:
+                switchLed(LED_NUM, ka == QBsdKeyboardHandler::NumLockOn);
+                break;
+
+            case QBsdKeyboardHandler::ScrollLockOn:
+            case QBsdKeyboardHandler::ScrollLockOff:
+                switchLed(LED_SCR, ka == QBsdKeyboardHandler::ScrollLockOn);
+                break;
+
+            default:
+                // ignore console switching and reboot
+                break;
+            }
+        }
+    }
+}
+
+void QBsdKeyboardHandler::processKeyEvent(int nativecode, int unicode, int qtcode,
+                                            Qt::KeyboardModifiers modifiers, bool isPress, bool autoRepeat)
+{
+    QWindowSystemInterface::handleExtendedKeyEvent(0, (isPress ? QEvent::KeyPress : QEvent::KeyRelease),
+                                                   qtcode, modifiers, nativecode + 8, 0, int(modifiers),
+                                                   (unicode != 0xffff ) ? QString(unicode) : QString(), autoRepeat);
+}
+
+QBsdKeyboardHandler::KeycodeAction QBsdKeyboardHandler::processKeycode(quint16 keycode, bool pressed, bool autorepeat)
+{
+    KeycodeAction result = None;
+    bool first_press = pressed && !autorepeat;
+
+    const QBsdKeyboardMap::Mapping *map_plain = 0;
+    const QBsdKeyboardMap::Mapping *map_withmod = 0;
+
+    quint8 modifiers = m_modifiers;
+
+    // get a specific and plain mapping for the keycode and the current modifiers
+    for (int i = 0; i < m_keymap_size && !(map_plain && map_withmod); ++i) {
+        const QBsdKeyboardMap::Mapping *m = m_keymap + i;
+        if (m->keycode == keycode) {
+            if (m->modifiers == 0)
+                map_plain = m;
+
+            quint8 testmods = m_modifiers;
+            if (m_locks[0] /*CapsLock*/ && (m->flags & QBsdKeyboardMap::IsLetter))
+                testmods ^= QBsdKeyboardMap::ModShift;
+            if (m->modifiers == testmods)
+                map_withmod = m;
+        }
+    }
+
+    if (m_locks[0] /*CapsLock*/ && map_withmod && (map_withmod->flags & QBsdKeyboardMap::IsLetter))
+        modifiers ^= QBsdKeyboardMap::ModShift;
+
+#ifdef QT_QPA_KEYMAP_DEBUG
+    qWarning("Processing key event: keycode=%3d, modifiers=%02x pressed=%d, autorepeat=%d  |  plain=%d, withmod=%d, size=%d", \
+             keycode, modifiers, pressed ? 1 : 0, autorepeat ? 1 : 0, \
+             map_plain ? map_plain - m_keymap : -1, \
+             map_withmod ? map_withmod - m_keymap : -1, \
+             m_keymap_size);
+#endif
+
+    const QBsdKeyboardMap::Mapping *it = map_withmod ? map_withmod : map_plain;
+
+    if (!it) {
+#ifdef QT_QPA_KEYMAP_DEBUG
+        // we couldn't even find a plain mapping
+        qWarning("Could not find a suitable mapping for keycode: %3d, modifiers: %02x", keycode, modifiers);
+#endif
+        return result;
+    }
+
+    bool skip = false;
+    quint16 unicode = it->unicode;
+    quint32 qtcode = it->qtcode;
+
+    if ((it->flags & QBsdKeyboardMap::IsModifier) && it->special) {
+        // this is a modifier, i.e. Shift, Alt, ...
+        if (pressed)
+            m_modifiers |= quint8(it->special);
+        else
+            m_modifiers &= ~quint8(it->special);
+    } else if (qtcode >= Qt::Key_CapsLock && qtcode <= Qt::Key_ScrollLock) {
+        // (Caps|Num|Scroll)Lock
+        if (first_press) {
+            quint8 &lock = m_locks[qtcode - Qt::Key_CapsLock];
+            lock ^= 1;
+
+            switch (qtcode) {
+            case Qt::Key_CapsLock  : result = lock ? CapsLockOn : CapsLockOff; break;
+            case Qt::Key_NumLock   : result = lock ? NumLockOn : NumLockOff; break;
+            case Qt::Key_ScrollLock: result = lock ? ScrollLockOn : ScrollLockOff; break;
+            default                : break;
+            }
+        }
+    } else if ((it->flags & QBsdKeyboardMap::IsSystem) && it->special && first_press) {
+        switch (it->special) {
+        case QBsdKeyboardMap::SystemReboot:
+            result = Reboot;
+            break;
+
+        case QBsdKeyboardMap::SystemZap:
+            if (!m_no_zap)
+                qApp->quit();
+            break;
+
+        case QBsdKeyboardMap::SystemConsolePrevious:
+            result = PreviousConsole;
+            break;
+
+        case QBsdKeyboardMap::SystemConsoleNext:
+            result = NextConsole;
+            break;
+
+        default:
+            if (it->special >= QBsdKeyboardMap::SystemConsoleFirst &&
+                it->special <= QBsdKeyboardMap::SystemConsoleLast) {
+                result = KeycodeAction(SwitchConsoleFirst + ((it->special & QBsdKeyboardMap::SystemConsoleMask) & SwitchConsoleMask));
+            }
+            break;
+        }
+
+        skip = true; // no need to tell Qt about it
+    } else if ((qtcode == Qt::Key_Multi_key) && m_do_compose) {
+        // the Compose key was pressed
+        if (first_press)
+            m_composing = 2;
+        skip = true;
+    } else if ((it->flags & QBsdKeyboardMap::IsDead) && m_do_compose) {
+        // a Dead key was pressed
+        if (first_press && m_composing == 1 && m_dead_unicode == unicode) { // twice
+            m_composing = 0;
+            qtcode = Qt::Key_unknown; // otherwise it would be Qt::Key_Dead...
+        } else if (first_press && unicode != 0xffff) {
+            m_dead_unicode = unicode;
+            m_composing = 1;
+            skip = true;
+        } else {
+            skip = true;
+        }
+    }
+
+    if (!skip) {
+        // a normal key was pressed
+        const int modmask = Qt::ShiftModifier | Qt::ControlModifier | Qt::AltModifier | Qt::MetaModifier | Qt::KeypadModifier;
+
+        // we couldn't find a specific mapping for the current modifiers,
+        // or that mapping didn't have special modifiers:
+        // so just report the plain mapping with additional modifiers.
+        if ((it == map_plain && it != map_withmod) ||
+            (map_withmod && !(map_withmod->qtcode & modmask))) {
+            qtcode |= QBsdKeyboardHandler::toQtModifiers(modifiers);
+        }
+
+        if (m_composing == 2 && first_press && !(it->flags & QBsdKeyboardMap::IsModifier)) {
+            // the last key press was the Compose key
+            if (unicode != 0xffff) {
+                int idx = 0;
+                // check if this code is in the compose table at all
+                for ( ; idx < m_keycompose_size; ++idx) {
+                    if (m_keycompose[idx].first == unicode)
+                        break;
+                }
+                if (idx < m_keycompose_size) {
+                    // found it -> simulate a Dead key press
+                    m_dead_unicode = unicode;
+                    unicode = 0xffff;
+                    m_composing = 1;
+                    skip = true;
+                } else {
+                    m_composing = 0;
+                }
+            } else {
+                m_composing = 0;
+            }
+        } else if (m_composing == 1 && first_press && !(it->flags & QBsdKeyboardMap::IsModifier)) {
+            // the last key press was a Dead key
+            bool valid = false;
+            if (unicode != 0xffff) {
+                int idx = 0;
+                // check if this code is in the compose table at all
+                for ( ; idx < m_keycompose_size; ++idx) {
+                    if (m_keycompose[idx].first == m_dead_unicode && m_keycompose[idx].second == unicode)
+                        break;
+                }
+                if (idx < m_keycompose_size) {
+                    quint16 composed = m_keycompose[idx].result;
+                    if (composed != 0xffff) {
+                        unicode = composed;
+                        qtcode = Qt::Key_unknown;
+                        valid = true;
+                    }
+                }
+            }
+            if (!valid) {
+                unicode = m_dead_unicode;
+                qtcode = Qt::Key_unknown;
+            }
+            m_composing = 0;
+        }
+
+        if (!skip) {
+#ifdef QT_QPA_KEYMAP_DEBUG
+            qWarning("Processing: uni=%04x, qt=%08x, qtmod=%08x", unicode, qtcode & ~modmask, (qtcode & modmask));
+#endif
+            //If NumLockOff and keypad key pressed remap event sent
+            if (!m_locks[1] &&
+                 (qtcode & Qt::KeypadModifier) &&
+                 keycode >= 71 &&
+                 keycode <= 83 &&
+                 keycode != 74 &&
+                 keycode != 78) {
+
+                unicode = 0xffff;
+                int oldMask = (qtcode & modmask);
+                switch (keycode) {
+                case 71: //7 --> Home
+                    qtcode = Qt::Key_Home;
+                    break;
+                case 72: //8 --> Up
+                    qtcode = Qt::Key_Up;
+                    break;
+                case 73: //9 --> PgUp
+                    qtcode = Qt::Key_PageUp;
+                    break;
+                case 75: //4 --> Left
+                    qtcode = Qt::Key_Left;
+                    break;
+                case 76: //5 --> Clear
+                    qtcode = Qt::Key_Clear;
+                    break;
+                case 77: //6 --> right
+                    qtcode = Qt::Key_Right;
+                    break;
+                case 79: //1 --> End
+                    qtcode = Qt::Key_End;
+                    break;
+                case 80: //2 --> Down
+                    qtcode = Qt::Key_Down;
+                    break;
+                case 81: //3 --> PgDn
+                    qtcode = Qt::Key_PageDown;
+                    break;
+                case 82: //0 --> Ins
+                    qtcode = Qt::Key_Insert;
+                    break;
+                case 83: //, --> Del
+                    qtcode = Qt::Key_Delete;
+                    break;
+                }
+                qtcode ^= oldMask;
+            }
+
+            // send the result to the server
+            processKeyEvent(keycode, unicode, qtcode & ~modmask, Qt::KeyboardModifiers(qtcode & modmask), pressed, autorepeat);
+        }
+    }
+    return result;
+}
+
+void QBsdKeyboardHandler::switchLed(int led, bool state)
+{
+#ifdef QT_QPA_KEYMAP_DEBUG
+    qWarning() << "switchLed" << led << state;
+#endif
+    int leds = 0;
+    if (::ioctl(m_fd, KDGETLED, &leds) < 0) {
+        qWarning("switchLed: Failed to query led states.");
+        return;
+    }
+
+    if (state)
+        leds |= led;
+    else
+        leds &= ~led;
+
+    if (::ioctl(m_fd, KDSETLED, leds) < 0) {
+        qWarning("switchLed: Failed to set led states.");
+        return;
+    }
+}
+
+
+void QBsdKeyboardHandler::unloadKeymap()
+{
+#ifdef QT_QPA_KEYMAP_DEBUG
+    qWarning() << "Unload current keymap and restore built-in";
+#endif
+
+    if (m_keymap && m_keymap != s_keymap_default)
+        delete [] m_keymap;
+    if (m_keycompose && m_keycompose != s_keycompose_default)
+        delete [] m_keycompose;
+
+    m_keymap = s_keymap_default;
+    m_keymap_size = sizeof(s_keymap_default) / sizeof(s_keymap_default[0]);
+    m_keycompose = s_keycompose_default;
+    m_keycompose_size = sizeof(s_keycompose_default) / sizeof(s_keycompose_default[0]);
+
+    // reset state, so we could switch keymaps at runtime
+    m_modifiers = 0;
+    memset(m_locks, 0, sizeof(m_locks));
+    m_composing = 0;
+    m_dead_unicode = 0xffff;
+
+    //Set locks according to keyboard leds
+    int leds = 0;
+    if (::ioctl(m_fd, KDGETLED, &leds) < 0) {
+        qWarning("Failed to query led states. Settings numlock & capslock off");
+        switchLed(LED_NUM, false);
+        switchLed(LED_CAP, false);
+        switchLed(LED_SCR, false);
+    } else {
+        //Capslock
+        if ((leds & LED_CAP) > 0)
+            m_locks[0] = 1;
+        //Numlock
+        if ((leds & LED_NUM) > 0)
+            m_locks[1] = 1;
+        //Scrollock
+        if ((leds & LED_SCR) > 0)
+            m_locks[2] = 1;
+#ifdef QT_QPA_KEYMAP_DEBUG
+        qWarning("numlock=%d , capslock=%d, scrolllock=%d",m_locks[1],m_locks[0],m_locks[2]);
+#endif
+    }
+}
+
+bool QBsdKeyboardHandler::loadKeymap(const QString &file)
+{
+#ifdef QT_QPA_KEYMAP_DEBUG
+    qWarning() << "Load keymap" << file;
+#endif
+
+    QFile f(file);
+
+    if (!f.open(QIODevice::ReadOnly)) {
+        qWarning("Could not open keymap file '%s'", qPrintable(file));
+        return false;
+    }
+
+    // .qmap files have a very simple structure:
+    // quint32 magic           (QKeyboard::FileMagic)
+    // quint32 version         (1)
+    // quint32 keymap_size     (# of struct QKeyboard::Mappings)
+    // quint32 keycompose_size (# of struct QKeyboard::Composings)
+    // all QKeyboard::Mappings via QDataStream::operator(<<|>>)
+    // all QKeyboard::Composings via QDataStream::operator(<<|>>)
+
+    quint32 qmap_magic, qmap_version, qmap_keymap_size, qmap_keycompose_size;
+
+    QDataStream ds(&f);
+
+    ds >> qmap_magic >> qmap_version >> qmap_keymap_size >> qmap_keycompose_size;
+
+    if (ds.status() != QDataStream::Ok || qmap_magic != QBsdKeyboardMap::FileMagic || qmap_version != 1 || qmap_keymap_size == 0) {
+        qWarning("'%s' is ot a valid.qmap keymap file.", qPrintable(file));
+        return false;
+    }
+
+    QBsdKeyboardMap::Mapping *qmap_keymap = new QBsdKeyboardMap::Mapping[qmap_keymap_size];
+    QBsdKeyboardMap::Composing *qmap_keycompose = qmap_keycompose_size ? new QBsdKeyboardMap::Composing[qmap_keycompose_size] : 0;
+
+    for (quint32 i = 0; i < qmap_keymap_size; ++i)
+        ds >> qmap_keymap[i];
+    for (quint32 i = 0; i < qmap_keycompose_size; ++i)
+        ds >> qmap_keycompose[i];
+
+    if (ds.status() != QDataStream::Ok) {
+        delete [] qmap_keymap;
+        delete [] qmap_keycompose;
+
+        qWarning("Keymap file '%s' can not be loaded.", qPrintable(file));
+        return false;
+    }
+
+    // unload currently active and clear state
+    unloadKeymap();
+
+    m_keymap = qmap_keymap;
+    m_keymap_size = qmap_keymap_size;
+    m_keycompose = qmap_keycompose;
+    m_keycompose_size = qmap_keycompose_size;
+
+    m_do_compose = true;
+
+    return true;
+
+}
+
+QT_END_NAMESPACE
diff -Naur src/plugins/generic/bsdkeyboard.orig/qbsdkeyboard.h src/plugins/generic/bsdkeyboard/qbsdkeyboard.h
--- src/plugins/generic/bsdkeyboard.orig/qbsdkeyboard.h	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/generic/bsdkeyboard/qbsdkeyboard.h	2016-03-08 12:43:58.413795000 -0800
@@ -0,0 +1,201 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights. These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QTSLIB_H
+#define QTSLIB_H
+
+#include <qobject.h>
+//#include <Qt>
+#include <QDataStream>
+
+QT_BEGIN_NAMESPACE
+
+class QSocketNotifier;
+
+struct termios;
+
+namespace QBsdKeyboardMap {
+    const quint32 FileMagic = 0x514d4150; // 'QMAP'
+
+    struct Mapping {
+        quint16 keycode;
+        quint16 unicode;
+        quint32 qtcode;
+        quint8 modifiers;
+        quint8 flags;
+        quint16 special;
+
+    };
+
+    enum Flags {
+        IsDead     = 0x01,
+        IsLetter   = 0x02,
+        IsModifier = 0x04,
+        IsSystem   = 0x08
+    };
+
+    enum System {
+        SystemConsoleFirst    = 0x0100,
+        SystemConsoleMask     = 0x007f,
+        SystemConsoleLast     = 0x017f,
+        SystemConsolePrevious = 0x0180,
+        SystemConsoleNext     = 0x0181,
+        SystemReboot          = 0x0200,
+        SystemZap             = 0x0300
+    };
+
+    struct Composing {
+        quint16 first;
+        quint16 second;
+        quint16 result;
+    };
+
+    enum Modifiers {
+        ModPlain   = 0x00,
+        ModShift   = 0x01,
+        ModAltGr   = 0x02,
+        ModControl = 0x04,
+        ModAlt     = 0x08,
+        ModShiftL  = 0x10,
+        ModShiftR  = 0x20,
+        ModCtrlL   = 0x40,
+        ModCtrlR   = 0x80
+        // ModCapsShift = 0x100, // not supported!
+    };
+}
+
+inline QDataStream &operator>>(QDataStream &ds, QBsdKeyboardMap::Mapping &m)
+{
+    return ds >> m.keycode >> m.unicode >> m.qtcode >> m.modifiers >> m.flags >> m.special;
+}
+
+inline QDataStream &operator<<(QDataStream &ds, const QBsdKeyboardMap::Mapping &m)
+{
+    return ds << m.keycode << m.unicode << m.qtcode << m.modifiers << m.flags << m.special;
+}
+
+inline QDataStream &operator>>(QDataStream &ds, QBsdKeyboardMap::Composing &c)
+{
+    return ds >> c.first >> c.second >> c.result;
+}
+
+inline QDataStream &operator<<(QDataStream &ds, const QBsdKeyboardMap::Composing &c)
+{
+    return ds << c.first << c.second << c.result;
+}
+
+class QBsdKeyboardHandler : public QObject
+{
+    Q_OBJECT
+public:
+    QBsdKeyboardHandler(const QString &key, const QString &specification);
+    ~QBsdKeyboardHandler();
+
+    enum KeycodeAction {
+        None               = 0,
+
+        CapsLockOff        = 0x01000000,
+        CapsLockOn         = 0x01000001,
+        NumLockOff         = 0x02000000,
+        NumLockOn          = 0x02000001,
+        ScrollLockOff      = 0x03000000,
+        ScrollLockOn       = 0x03000001,
+
+        Reboot             = 0x04000000,
+
+        PreviousConsole    = 0x05000000,
+        NextConsole        = 0x05000001,
+        SwitchConsoleFirst = 0x06000000,
+        SwitchConsoleLast  = 0x0600007f,
+        SwitchConsoleMask  = 0x0000007f
+    };
+
+    static Qt::KeyboardModifiers toQtModifiers(quint8 mod)
+    {
+        Qt::KeyboardModifiers qtmod = Qt::NoModifier;
+
+        if (mod & (QBsdKeyboardMap::ModShift | QBsdKeyboardMap::ModShiftL | QBsdKeyboardMap::ModShiftR))
+            qtmod |= Qt::ShiftModifier;
+        if (mod & (QBsdKeyboardMap::ModControl | QBsdKeyboardMap::ModCtrlL | QBsdKeyboardMap::ModCtrlR))
+            qtmod |= Qt::ControlModifier;
+        if (mod & QBsdKeyboardMap::ModAlt)
+            qtmod |= Qt::AltModifier;
+
+        return qtmod;
+    }
+
+
+
+protected:
+    bool loadKeymap(const QString &file);
+    void unloadKeymap();
+    void switchLed(int led, bool state);
+    KeycodeAction processKeycode(quint16 keycode, bool pressed, bool autorepeat);
+    void processKeyEvent(int nativecode, int unicode, int qtcode,
+                         Qt::KeyboardModifiers modifiers, bool isPress, bool autoRepeat);\
+    void revertTTYSettings();
+
+private slots:
+    void readKeyboardData();
+
+private:
+    QSocketNotifier * m_notify;
+    struct termios *m_kbd_orig_tty;
+    int m_fd;
+    bool m_should_close;
+    QString m_spec;
+
+    // keymap handling
+    quint8 m_modifiers;
+    quint8 m_locks[3];
+    int m_composing;
+    quint16 m_dead_unicode;
+
+    bool m_no_zap;
+    bool m_do_compose;
+
+    const QBsdKeyboardMap::Mapping *m_keymap;
+    int m_keymap_size;
+    const QBsdKeyboardMap::Composing *m_keycompose;
+    int m_keycompose_size;
+
+    int m_orig_kbd_mode;
+
+    static const QBsdKeyboardMap::Mapping s_keymap_default[];
+    static const QBsdKeyboardMap::Composing s_keycompose_default[];
+
+};
+
+QT_END_NAMESPACE
+
+#endif // QTSLIB_H
diff -Naur src/plugins/generic/bsdkeyboard.orig/qbsdkeyboard_defaultmap.h src/plugins/generic/bsdkeyboard/qbsdkeyboard_defaultmap.h
--- src/plugins/generic/bsdkeyboard.orig/qbsdkeyboard_defaultmap.h	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/generic/bsdkeyboard/qbsdkeyboard_defaultmap.h	2016-03-08 12:43:58.413986000 -0800
@@ -0,0 +1,822 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights. These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QEVDEVKEYBOARDHANDLER_DEFAULTMAP_P_H
+#define QEVDEVKEYBOARDHANDLER_DEFAULTMAP_P_H
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+#include "qnamespace.h"
+
+// no QT_BEGIN_NAMESPACE, since we include it internally...
+
+const QBsdKeyboardMap::Mapping QBsdKeyboardHandler::s_keymap_default[] = {
+    {   1, 0xffff, 0x01000000, 0x00, 0x00, 0x0000 },
+    {   2, 0x0031, 0x00000031, 0x00, 0x00, 0x0000 },
+    {   2, 0x0021, 0x00000021, 0x01, 0x00, 0x0000 },
+    {   3, 0x0032, 0x00000032, 0x00, 0x00, 0x0000 },
+    {   3, 0x0040, 0x00000040, 0x01, 0x00, 0x0000 },
+    {   3, 0x0040, 0x00000040, 0x02, 0x00, 0x0000 },
+    {   4, 0x0033, 0x00000033, 0x00, 0x00, 0x0000 },
+    {   4, 0x0023, 0x00000023, 0x01, 0x00, 0x0000 },
+    {   4, 0xffff, 0x01000000, 0x04, 0x00, 0x0000 },
+    {   5, 0x0034, 0x00000034, 0x00, 0x00, 0x0000 },
+    {   5, 0x0024, 0x00000024, 0x01, 0x00, 0x0000 },
+    {   5, 0x0024, 0x00000024, 0x02, 0x00, 0x0000 },
+    {   5, 0x005c, 0x0400005c, 0x04, 0x00, 0x0000 },
+    {   6, 0x0035, 0x00000035, 0x00, 0x00, 0x0000 },
+    {   6, 0x0025, 0x00000025, 0x01, 0x00, 0x0000 },
+    {   6, 0x005d, 0x0400005d, 0x04, 0x00, 0x0000 },
+    {   7, 0x0036, 0x00000036, 0x00, 0x00, 0x0000 },
+    {   7, 0x005e, 0x0000005e, 0x01, 0x00, 0x0000 },
+    {   7, 0x005e, 0x01001252, 0x02, 0x01, 0x0000 },
+    {   7, 0x005e, 0x0400005e, 0x04, 0x00, 0x0000 },
+    {   8, 0x0037, 0x00000037, 0x00, 0x00, 0x0000 },
+    {   8, 0x0026, 0x00000026, 0x01, 0x00, 0x0000 },
+    {   8, 0x007b, 0x0000007b, 0x02, 0x00, 0x0000 },
+    {   8, 0x005f, 0x0400005f, 0x04, 0x00, 0x0000 },
+    {   9, 0x0038, 0x00000038, 0x00, 0x00, 0x0000 },
+    {   9, 0x002a, 0x0000002a, 0x01, 0x00, 0x0000 },
+    {   9, 0x005b, 0x0000005b, 0x02, 0x00, 0x0000 },
+    {   9, 0xffff, 0x01000003, 0x04, 0x00, 0x0000 },
+    {  10, 0x0039, 0x00000039, 0x00, 0x00, 0x0000 },
+    {  10, 0x0028, 0x00000028, 0x01, 0x00, 0x0000 },
+    {  10, 0x005d, 0x0000005d, 0x02, 0x00, 0x0000 },
+    {  11, 0x0030, 0x00000030, 0x00, 0x00, 0x0000 },
+    {  11, 0x0029, 0x00000029, 0x01, 0x00, 0x0000 },
+    {  11, 0x007d, 0x0000007d, 0x02, 0x00, 0x0000 },
+    {  12, 0x002d, 0x0000002d, 0x00, 0x00, 0x0000 },
+    {  12, 0x005f, 0x0000005f, 0x01, 0x00, 0x0000 },
+    {  12, 0x005c, 0x0000005c, 0x02, 0x00, 0x0000 },
+    {  12, 0x005f, 0x0400005f, 0x04, 0x00, 0x0000 },
+    {  12, 0x005f, 0x0400005f, 0x05, 0x00, 0x0000 },
+    {  13, 0x003d, 0x0000003d, 0x00, 0x00, 0x0000 },
+    {  13, 0x002b, 0x0000002b, 0x01, 0x00, 0x0000 },
+    {  14, 0xffff, 0x01000003, 0x00, 0x00, 0x0000 },
+    {  14, 0xffff, 0x01000000, 0x0c, 0x08, 0x0300 },
+    {  15, 0xffff, 0x01000001, 0x00, 0x00, 0x0000 },
+    {  16, 0x0071, 0x00000051, 0x00, 0x02, 0x0000 },
+    {  16, 0x0051, 0x00000051, 0x01, 0x02, 0x0000 },
+    {  16, 0x0071, 0x00000051, 0x02, 0x02, 0x0000 },
+    {  16, 0x0051, 0x00000051, 0x03, 0x02, 0x0000 },
+    {  16, 0x0071, 0x04000051, 0x04, 0x02, 0x0000 },
+    {  16, 0x0071, 0x04000051, 0x05, 0x02, 0x0000 },
+    {  16, 0x0071, 0x04000051, 0x06, 0x02, 0x0000 },
+    {  16, 0x0071, 0x04000051, 0x07, 0x02, 0x0000 },
+    {  16, 0x0071, 0x08000051, 0x08, 0x02, 0x0000 },
+    {  16, 0x0071, 0x08000051, 0x09, 0x02, 0x0000 },
+    {  16, 0x0071, 0x08000051, 0x0a, 0x02, 0x0000 },
+    {  16, 0x0071, 0x08000051, 0x0b, 0x02, 0x0000 },
+    {  16, 0x0071, 0x0c000051, 0x0c, 0x02, 0x0000 },
+    {  16, 0x0071, 0x0c000051, 0x0d, 0x02, 0x0000 },
+    {  16, 0x0071, 0x0c000051, 0x0e, 0x02, 0x0000 },
+    {  16, 0x0071, 0x0c000051, 0x0f, 0x02, 0x0000 },
+    {  17, 0x0077, 0x00000057, 0x00, 0x02, 0x0000 },
+    {  17, 0x0057, 0x00000057, 0x01, 0x02, 0x0000 },
+    {  17, 0x0077, 0x00000057, 0x02, 0x02, 0x0000 },
+    {  17, 0x0057, 0x00000057, 0x03, 0x02, 0x0000 },
+    {  17, 0x0077, 0x04000057, 0x04, 0x02, 0x0000 },
+    {  17, 0x0077, 0x04000057, 0x05, 0x02, 0x0000 },
+    {  17, 0x0077, 0x04000057, 0x06, 0x02, 0x0000 },
+    {  17, 0x0077, 0x04000057, 0x07, 0x02, 0x0000 },
+    {  17, 0x0077, 0x08000057, 0x08, 0x02, 0x0000 },
+    {  17, 0x0077, 0x08000057, 0x09, 0x02, 0x0000 },
+    {  17, 0x0077, 0x08000057, 0x0a, 0x02, 0x0000 },
+    {  17, 0x0077, 0x08000057, 0x0b, 0x02, 0x0000 },
+    {  17, 0x0077, 0x0c000057, 0x0c, 0x02, 0x0000 },
+    {  17, 0x0077, 0x0c000057, 0x0d, 0x02, 0x0000 },
+    {  17, 0x0077, 0x0c000057, 0x0e, 0x02, 0x0000 },
+    {  17, 0x0077, 0x0c000057, 0x0f, 0x02, 0x0000 },
+    {  18, 0x0065, 0x00000045, 0x00, 0x02, 0x0000 },
+    {  18, 0x0045, 0x00000045, 0x01, 0x02, 0x0000 },
+    {  18, 0x0065, 0x00000045, 0x02, 0x02, 0x0000 },
+    {  18, 0x0045, 0x00000045, 0x03, 0x02, 0x0000 },
+    {  18, 0x0065, 0x04000045, 0x04, 0x02, 0x0000 },
+    {  18, 0x0065, 0x04000045, 0x05, 0x02, 0x0000 },
+    {  18, 0x0065, 0x04000045, 0x06, 0x02, 0x0000 },
+    {  18, 0x0065, 0x04000045, 0x07, 0x02, 0x0000 },
+    {  18, 0x0065, 0x08000045, 0x08, 0x02, 0x0000 },
+    {  18, 0x0065, 0x08000045, 0x09, 0x02, 0x0000 },
+    {  18, 0x0065, 0x08000045, 0x0a, 0x02, 0x0000 },
+    {  18, 0x0065, 0x08000045, 0x0b, 0x02, 0x0000 },
+    {  18, 0x0065, 0x0c000045, 0x0c, 0x02, 0x0000 },
+    {  18, 0x0065, 0x0c000045, 0x0d, 0x02, 0x0000 },
+    {  18, 0x0065, 0x0c000045, 0x0e, 0x02, 0x0000 },
+    {  18, 0x0065, 0x0c000045, 0x0f, 0x02, 0x0000 },
+    {  19, 0x0072, 0x00000052, 0x00, 0x02, 0x0000 },
+    {  19, 0x0052, 0x00000052, 0x01, 0x02, 0x0000 },
+    {  19, 0x0072, 0x00000052, 0x02, 0x02, 0x0000 },
+    {  19, 0x0052, 0x00000052, 0x03, 0x02, 0x0000 },
+    {  19, 0x0072, 0x04000052, 0x04, 0x02, 0x0000 },
+    {  19, 0x0072, 0x04000052, 0x05, 0x02, 0x0000 },
+    {  19, 0x0072, 0x04000052, 0x06, 0x02, 0x0000 },
+    {  19, 0x0072, 0x04000052, 0x07, 0x02, 0x0000 },
+    {  19, 0x0072, 0x08000052, 0x08, 0x02, 0x0000 },
+    {  19, 0x0072, 0x08000052, 0x09, 0x02, 0x0000 },
+    {  19, 0x0072, 0x08000052, 0x0a, 0x02, 0x0000 },
+    {  19, 0x0072, 0x08000052, 0x0b, 0x02, 0x0000 },
+    {  19, 0x0072, 0x0c000052, 0x0c, 0x02, 0x0000 },
+    {  19, 0x0072, 0x0c000052, 0x0d, 0x02, 0x0000 },
+    {  19, 0x0072, 0x0c000052, 0x0e, 0x02, 0x0000 },
+    {  19, 0x0072, 0x0c000052, 0x0f, 0x02, 0x0000 },
+    {  20, 0x0074, 0x00000054, 0x00, 0x02, 0x0000 },
+    {  20, 0x0054, 0x00000054, 0x01, 0x02, 0x0000 },
+    {  20, 0x0074, 0x00000054, 0x02, 0x02, 0x0000 },
+    {  20, 0x0054, 0x00000054, 0x03, 0x02, 0x0000 },
+    {  20, 0x0074, 0x04000054, 0x04, 0x02, 0x0000 },
+    {  20, 0x0074, 0x04000054, 0x05, 0x02, 0x0000 },
+    {  20, 0x0074, 0x04000054, 0x06, 0x02, 0x0000 },
+    {  20, 0x0074, 0x04000054, 0x07, 0x02, 0x0000 },
+    {  20, 0x0074, 0x08000054, 0x08, 0x02, 0x0000 },
+    {  20, 0x0074, 0x08000054, 0x09, 0x02, 0x0000 },
+    {  20, 0x0074, 0x08000054, 0x0a, 0x02, 0x0000 },
+    {  20, 0x0074, 0x08000054, 0x0b, 0x02, 0x0000 },
+    {  20, 0x0074, 0x0c000054, 0x0c, 0x02, 0x0000 },
+    {  20, 0x0074, 0x0c000054, 0x0d, 0x02, 0x0000 },
+    {  20, 0x0074, 0x0c000054, 0x0e, 0x02, 0x0000 },
+    {  20, 0x0074, 0x0c000054, 0x0f, 0x02, 0x0000 },
+    {  21, 0x0079, 0x00000059, 0x00, 0x02, 0x0000 },
+    {  21, 0x0059, 0x00000059, 0x01, 0x02, 0x0000 },
+    {  21, 0x0079, 0x00000059, 0x02, 0x02, 0x0000 },
+    {  21, 0x0059, 0x00000059, 0x03, 0x02, 0x0000 },
+    {  21, 0x0079, 0x04000059, 0x04, 0x02, 0x0000 },
+    {  21, 0x0079, 0x04000059, 0x05, 0x02, 0x0000 },
+    {  21, 0x0079, 0x04000059, 0x06, 0x02, 0x0000 },
+    {  21, 0x0079, 0x04000059, 0x07, 0x02, 0x0000 },
+    {  21, 0x0079, 0x08000059, 0x08, 0x02, 0x0000 },
+    {  21, 0x0079, 0x08000059, 0x09, 0x02, 0x0000 },
+    {  21, 0x0079, 0x08000059, 0x0a, 0x02, 0x0000 },
+    {  21, 0x0079, 0x08000059, 0x0b, 0x02, 0x0000 },
+    {  21, 0x0079, 0x0c000059, 0x0c, 0x02, 0x0000 },
+    {  21, 0x0079, 0x0c000059, 0x0d, 0x02, 0x0000 },
+    {  21, 0x0079, 0x0c000059, 0x0e, 0x02, 0x0000 },
+    {  21, 0x0079, 0x0c000059, 0x0f, 0x02, 0x0000 },
+    {  22, 0x0075, 0x00000055, 0x00, 0x02, 0x0000 },
+    {  22, 0x0055, 0x00000055, 0x01, 0x02, 0x0000 },
+    {  22, 0x0075, 0x00000055, 0x02, 0x02, 0x0000 },
+    {  22, 0x0055, 0x00000055, 0x03, 0x02, 0x0000 },
+    {  22, 0x0075, 0x04000055, 0x04, 0x02, 0x0000 },
+    {  22, 0x0075, 0x04000055, 0x05, 0x02, 0x0000 },
+    {  22, 0x0075, 0x04000055, 0x06, 0x02, 0x0000 },
+    {  22, 0x0075, 0x04000055, 0x07, 0x02, 0x0000 },
+    {  22, 0x0075, 0x08000055, 0x08, 0x02, 0x0000 },
+    {  22, 0x0075, 0x08000055, 0x09, 0x02, 0x0000 },
+    {  22, 0x0075, 0x08000055, 0x0a, 0x02, 0x0000 },
+    {  22, 0x0075, 0x08000055, 0x0b, 0x02, 0x0000 },
+    {  22, 0x0075, 0x0c000055, 0x0c, 0x02, 0x0000 },
+    {  22, 0x0075, 0x0c000055, 0x0d, 0x02, 0x0000 },
+    {  22, 0x0075, 0x0c000055, 0x0e, 0x02, 0x0000 },
+    {  22, 0x0075, 0x0c000055, 0x0f, 0x02, 0x0000 },
+    {  23, 0x0069, 0x00000049, 0x00, 0x02, 0x0000 },
+    {  23, 0x0049, 0x00000049, 0x01, 0x02, 0x0000 },
+    {  23, 0x0069, 0x00000049, 0x02, 0x02, 0x0000 },
+    {  23, 0x0049, 0x00000049, 0x03, 0x02, 0x0000 },
+    {  23, 0x0069, 0x04000049, 0x04, 0x02, 0x0000 },
+    {  23, 0x0069, 0x04000049, 0x05, 0x02, 0x0000 },
+    {  23, 0x0069, 0x04000049, 0x06, 0x02, 0x0000 },
+    {  23, 0x0069, 0x04000049, 0x07, 0x02, 0x0000 },
+    {  23, 0x0069, 0x08000049, 0x08, 0x02, 0x0000 },
+    {  23, 0x0069, 0x08000049, 0x09, 0x02, 0x0000 },
+    {  23, 0x0069, 0x08000049, 0x0a, 0x02, 0x0000 },
+    {  23, 0x0069, 0x08000049, 0x0b, 0x02, 0x0000 },
+    {  23, 0x0069, 0x0c000049, 0x0c, 0x02, 0x0000 },
+    {  23, 0x0069, 0x0c000049, 0x0d, 0x02, 0x0000 },
+    {  23, 0x0069, 0x0c000049, 0x0e, 0x02, 0x0000 },
+    {  23, 0x0069, 0x0c000049, 0x0f, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0000004f, 0x00, 0x02, 0x0000 },
+    {  24, 0x004f, 0x0000004f, 0x01, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0000004f, 0x02, 0x02, 0x0000 },
+    {  24, 0x004f, 0x0000004f, 0x03, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0400004f, 0x04, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0400004f, 0x05, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0400004f, 0x06, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0400004f, 0x07, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0800004f, 0x08, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0800004f, 0x09, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0800004f, 0x0a, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0800004f, 0x0b, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0c00004f, 0x0c, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0c00004f, 0x0d, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0c00004f, 0x0e, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0c00004f, 0x0f, 0x02, 0x0000 },
+    {  25, 0x0070, 0x00000050, 0x00, 0x02, 0x0000 },
+    {  25, 0x0050, 0x00000050, 0x01, 0x02, 0x0000 },
+    {  25, 0x0070, 0x00000050, 0x02, 0x02, 0x0000 },
+    {  25, 0x0050, 0x00000050, 0x03, 0x02, 0x0000 },
+    {  25, 0x0070, 0x04000050, 0x04, 0x02, 0x0000 },
+    {  25, 0x0070, 0x04000050, 0x05, 0x02, 0x0000 },
+    {  25, 0x0070, 0x04000050, 0x06, 0x02, 0x0000 },
+    {  25, 0x0070, 0x04000050, 0x07, 0x02, 0x0000 },
+    {  25, 0x0070, 0x08000050, 0x08, 0x02, 0x0000 },
+    {  25, 0x0070, 0x08000050, 0x09, 0x02, 0x0000 },
+    {  25, 0x0070, 0x08000050, 0x0a, 0x02, 0x0000 },
+    {  25, 0x0070, 0x08000050, 0x0b, 0x02, 0x0000 },
+    {  25, 0x0070, 0x0c000050, 0x0c, 0x02, 0x0000 },
+    {  25, 0x0070, 0x0c000050, 0x0d, 0x02, 0x0000 },
+    {  25, 0x0070, 0x0c000050, 0x0e, 0x02, 0x0000 },
+    {  25, 0x0070, 0x0c000050, 0x0f, 0x02, 0x0000 },
+    {  26, 0x005b, 0x0000005b, 0x00, 0x00, 0x0000 },
+    {  26, 0x007b, 0x0000007b, 0x01, 0x00, 0x0000 },
+    {  26, 0xffff, 0x01000000, 0x04, 0x00, 0x0000 },
+    {  27, 0x005d, 0x0000005d, 0x00, 0x00, 0x0000 },
+    {  27, 0x007d, 0x0000007d, 0x01, 0x00, 0x0000 },
+    {  27, 0x007e, 0x0000007e, 0x02, 0x00, 0x0000 },
+    {  27, 0x005d, 0x0400005d, 0x04, 0x00, 0x0000 },
+    {  28, 0xffff, 0x01000004, 0x00, 0x00, 0x0000 },
+    {  28, 0x006d, 0x0c00004d, 0x08, 0x00, 0x0000 },
+    {  29, 0xffff, 0x01000021, 0x00, 0x04, 0x0004 },
+    {  30, 0x0061, 0x00000041, 0x00, 0x02, 0x0000 },
+    {  30, 0x0041, 0x00000041, 0x01, 0x02, 0x0000 },
+    {  30, 0x0061, 0x00000041, 0x02, 0x02, 0x0000 },
+    {  30, 0x0041, 0x00000041, 0x03, 0x02, 0x0000 },
+    {  30, 0x0061, 0x04000041, 0x04, 0x02, 0x0000 },
+    {  30, 0x0061, 0x04000041, 0x05, 0x02, 0x0000 },
+    {  30, 0x0061, 0x04000041, 0x06, 0x02, 0x0000 },
+    {  30, 0x0061, 0x04000041, 0x07, 0x02, 0x0000 },
+    {  30, 0x0061, 0x08000041, 0x08, 0x02, 0x0000 },
+    {  30, 0x0061, 0x08000041, 0x09, 0x02, 0x0000 },
+    {  30, 0x0061, 0x08000041, 0x0a, 0x02, 0x0000 },
+    {  30, 0x0061, 0x08000041, 0x0b, 0x02, 0x0000 },
+    {  30, 0x0061, 0x0c000041, 0x0c, 0x02, 0x0000 },
+    {  30, 0x0061, 0x0c000041, 0x0d, 0x02, 0x0000 },
+    {  30, 0x0061, 0x0c000041, 0x0e, 0x02, 0x0000 },
+    {  30, 0x0061, 0x0c000041, 0x0f, 0x02, 0x0000 },
+    {  31, 0x0073, 0x00000053, 0x00, 0x02, 0x0000 },
+    {  31, 0x0053, 0x00000053, 0x01, 0x02, 0x0000 },
+    {  31, 0x0073, 0x00000053, 0x02, 0x02, 0x0000 },
+    {  31, 0x0053, 0x00000053, 0x03, 0x02, 0x0000 },
+    {  31, 0x0073, 0x04000053, 0x04, 0x02, 0x0000 },
+    {  31, 0x0073, 0x04000053, 0x05, 0x02, 0x0000 },
+    {  31, 0x0073, 0x04000053, 0x06, 0x02, 0x0000 },
+    {  31, 0x0073, 0x04000053, 0x07, 0x02, 0x0000 },
+    {  31, 0x0073, 0x08000053, 0x08, 0x02, 0x0000 },
+    {  31, 0x0073, 0x08000053, 0x09, 0x02, 0x0000 },
+    {  31, 0x0073, 0x08000053, 0x0a, 0x02, 0x0000 },
+    {  31, 0x0073, 0x08000053, 0x0b, 0x02, 0x0000 },
+    {  31, 0x0073, 0x0c000053, 0x0c, 0x02, 0x0000 },
+    {  31, 0x0073, 0x0c000053, 0x0d, 0x02, 0x0000 },
+    {  31, 0x0073, 0x0c000053, 0x0e, 0x02, 0x0000 },
+    {  31, 0x0073, 0x0c000053, 0x0f, 0x02, 0x0000 },
+    {  32, 0x0064, 0x00000044, 0x00, 0x02, 0x0000 },
+    {  32, 0x0044, 0x00000044, 0x01, 0x02, 0x0000 },
+    {  32, 0x0064, 0x00000044, 0x02, 0x02, 0x0000 },
+    {  32, 0x0044, 0x00000044, 0x03, 0x02, 0x0000 },
+    {  32, 0x0064, 0x04000044, 0x04, 0x02, 0x0000 },
+    {  32, 0x0064, 0x04000044, 0x05, 0x02, 0x0000 },
+    {  32, 0x0064, 0x04000044, 0x06, 0x02, 0x0000 },
+    {  32, 0x0064, 0x04000044, 0x07, 0x02, 0x0000 },
+    {  32, 0x0064, 0x08000044, 0x08, 0x02, 0x0000 },
+    {  32, 0x0064, 0x08000044, 0x09, 0x02, 0x0000 },
+    {  32, 0x0064, 0x08000044, 0x0a, 0x02, 0x0000 },
+    {  32, 0x0064, 0x08000044, 0x0b, 0x02, 0x0000 },
+    {  32, 0x0064, 0x0c000044, 0x0c, 0x02, 0x0000 },
+    {  32, 0x0064, 0x0c000044, 0x0d, 0x02, 0x0000 },
+    {  32, 0x0064, 0x0c000044, 0x0e, 0x02, 0x0000 },
+    {  32, 0x0064, 0x0c000044, 0x0f, 0x02, 0x0000 },
+    {  33, 0x0066, 0x00000046, 0x00, 0x02, 0x0000 },
+    {  33, 0x0046, 0x00000046, 0x01, 0x02, 0x0000 },
+    {  33, 0x0066, 0x00000046, 0x02, 0x02, 0x0000 },
+    {  33, 0x0046, 0x00000046, 0x03, 0x02, 0x0000 },
+    {  33, 0x0066, 0x04000046, 0x04, 0x02, 0x0000 },
+    {  33, 0x0066, 0x04000046, 0x05, 0x02, 0x0000 },
+    {  33, 0x0066, 0x04000046, 0x06, 0x02, 0x0000 },
+    {  33, 0x0066, 0x04000046, 0x07, 0x02, 0x0000 },
+    {  33, 0x0066, 0x08000046, 0x08, 0x02, 0x0000 },
+    {  33, 0x0066, 0x08000046, 0x09, 0x02, 0x0000 },
+    {  33, 0x0066, 0x08000046, 0x0a, 0x02, 0x0000 },
+    {  33, 0x0066, 0x08000046, 0x0b, 0x02, 0x0000 },
+    {  33, 0x0066, 0x0c000046, 0x0c, 0x02, 0x0000 },
+    {  33, 0x0066, 0x0c000046, 0x0d, 0x02, 0x0000 },
+    {  33, 0x0066, 0x0c000046, 0x0e, 0x02, 0x0000 },
+    {  33, 0x0066, 0x0c000046, 0x0f, 0x02, 0x0000 },
+    {  34, 0x0067, 0x00000047, 0x00, 0x02, 0x0000 },
+    {  34, 0x0047, 0x00000047, 0x01, 0x02, 0x0000 },
+    {  34, 0x0067, 0x00000047, 0x02, 0x02, 0x0000 },
+    {  34, 0x0047, 0x00000047, 0x03, 0x02, 0x0000 },
+    {  34, 0x0067, 0x04000047, 0x04, 0x02, 0x0000 },
+    {  34, 0x0067, 0x04000047, 0x05, 0x02, 0x0000 },
+    {  34, 0x0067, 0x04000047, 0x06, 0x02, 0x0000 },
+    {  34, 0x0067, 0x04000047, 0x07, 0x02, 0x0000 },
+    {  34, 0x0067, 0x08000047, 0x08, 0x02, 0x0000 },
+    {  34, 0x0067, 0x08000047, 0x09, 0x02, 0x0000 },
+    {  34, 0x0067, 0x08000047, 0x0a, 0x02, 0x0000 },
+    {  34, 0x0067, 0x08000047, 0x0b, 0x02, 0x0000 },
+    {  34, 0x0067, 0x0c000047, 0x0c, 0x02, 0x0000 },
+    {  34, 0x0067, 0x0c000047, 0x0d, 0x02, 0x0000 },
+    {  34, 0x0067, 0x0c000047, 0x0e, 0x02, 0x0000 },
+    {  34, 0x0067, 0x0c000047, 0x0f, 0x02, 0x0000 },
+    {  35, 0x0068, 0x00000048, 0x00, 0x02, 0x0000 },
+    {  35, 0x0048, 0x00000048, 0x01, 0x02, 0x0000 },
+    {  35, 0x0068, 0x00000048, 0x02, 0x02, 0x0000 },
+    {  35, 0x0048, 0x00000048, 0x03, 0x02, 0x0000 },
+    {  35, 0x0068, 0x04000048, 0x04, 0x02, 0x0000 },
+    {  35, 0x0068, 0x04000048, 0x05, 0x02, 0x0000 },
+    {  35, 0x0068, 0x04000048, 0x06, 0x02, 0x0000 },
+    {  35, 0x0068, 0x04000048, 0x07, 0x02, 0x0000 },
+    {  35, 0x0068, 0x08000048, 0x08, 0x02, 0x0000 },
+    {  35, 0x0068, 0x08000048, 0x09, 0x02, 0x0000 },
+    {  35, 0x0068, 0x08000048, 0x0a, 0x02, 0x0000 },
+    {  35, 0x0068, 0x08000048, 0x0b, 0x02, 0x0000 },
+    {  35, 0x0068, 0x0c000048, 0x0c, 0x02, 0x0000 },
+    {  35, 0x0068, 0x0c000048, 0x0d, 0x02, 0x0000 },
+    {  35, 0x0068, 0x0c000048, 0x0e, 0x02, 0x0000 },
+    {  35, 0x0068, 0x0c000048, 0x0f, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0000004a, 0x00, 0x02, 0x0000 },
+    {  36, 0x004a, 0x0000004a, 0x01, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0000004a, 0x02, 0x02, 0x0000 },
+    {  36, 0x004a, 0x0000004a, 0x03, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0400004a, 0x04, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0400004a, 0x05, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0400004a, 0x06, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0400004a, 0x07, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0800004a, 0x08, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0800004a, 0x09, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0800004a, 0x0a, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0800004a, 0x0b, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0c00004a, 0x0c, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0c00004a, 0x0d, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0c00004a, 0x0e, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0c00004a, 0x0f, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0000004b, 0x00, 0x02, 0x0000 },
+    {  37, 0x004b, 0x0000004b, 0x01, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0000004b, 0x02, 0x02, 0x0000 },
+    {  37, 0x004b, 0x0000004b, 0x03, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0400004b, 0x04, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0400004b, 0x05, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0400004b, 0x06, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0400004b, 0x07, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0800004b, 0x08, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0800004b, 0x09, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0800004b, 0x0a, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0800004b, 0x0b, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0c00004b, 0x0c, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0c00004b, 0x0d, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0c00004b, 0x0e, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0c00004b, 0x0f, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0000004c, 0x00, 0x02, 0x0000 },
+    {  38, 0x004c, 0x0000004c, 0x01, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0000004c, 0x02, 0x02, 0x0000 },
+    {  38, 0x004c, 0x0000004c, 0x03, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0400004c, 0x04, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0400004c, 0x05, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0400004c, 0x06, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0400004c, 0x07, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0800004c, 0x08, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0800004c, 0x09, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0800004c, 0x0a, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0800004c, 0x0b, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0c00004c, 0x0c, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0c00004c, 0x0d, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0c00004c, 0x0e, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0c00004c, 0x0f, 0x02, 0x0000 },
+    {  39, 0x003b, 0x0000003b, 0x00, 0x00, 0x0000 },
+    {  39, 0x003a, 0x0000003a, 0x01, 0x00, 0x0000 },
+    {  40, 0x0027, 0x00000027, 0x00, 0x00, 0x0000 },
+    {  40, 0x0022, 0x00000022, 0x01, 0x00, 0x0000 },
+    {  40, 0x0027, 0x01001251, 0x02, 0x01, 0x0000 },
+    {  40, 0x0022, 0x01001257, 0x03, 0x01, 0x0000 },
+    {  40, 0x0067, 0x04000047, 0x04, 0x00, 0x0000 },
+    {  41, 0x0060, 0x00000060, 0x00, 0x00, 0x0000 },
+    {  41, 0x007e, 0x0000007e, 0x01, 0x00, 0x0000 },
+    {  41, 0x0060, 0x01001250, 0x02, 0x01, 0x0000 },
+    {  41, 0x007e, 0x01001253, 0x03, 0x01, 0x0000 },
+    {  42, 0xffff, 0x01000020, 0x00, 0x04, 0x0001 },
+    {  43, 0x005c, 0x0000005c, 0x00, 0x00, 0x0000 },
+    {  43, 0x007c, 0x0000007c, 0x01, 0x00, 0x0000 },
+    {  43, 0x005c, 0x0400005c, 0x04, 0x00, 0x0000 },
+    {  44, 0x007a, 0x0000005a, 0x00, 0x02, 0x0000 },
+    {  44, 0x005a, 0x0000005a, 0x01, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0000005a, 0x02, 0x02, 0x0000 },
+    {  44, 0x005a, 0x0000005a, 0x03, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0400005a, 0x04, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0400005a, 0x05, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0400005a, 0x06, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0400005a, 0x07, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0800005a, 0x08, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0800005a, 0x09, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0800005a, 0x0a, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0800005a, 0x0b, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0c00005a, 0x0c, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0c00005a, 0x0d, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0c00005a, 0x0e, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0c00005a, 0x0f, 0x02, 0x0000 },
+    {  45, 0x0078, 0x00000058, 0x00, 0x02, 0x0000 },
+    {  45, 0x0058, 0x00000058, 0x01, 0x02, 0x0000 },
+    {  45, 0x0078, 0x00000058, 0x02, 0x02, 0x0000 },
+    {  45, 0x0058, 0x00000058, 0x03, 0x02, 0x0000 },
+    {  45, 0x0078, 0x04000058, 0x04, 0x02, 0x0000 },
+    {  45, 0x0078, 0x04000058, 0x05, 0x02, 0x0000 },
+    {  45, 0x0078, 0x04000058, 0x06, 0x02, 0x0000 },
+    {  45, 0x0078, 0x04000058, 0x07, 0x02, 0x0000 },
+    {  45, 0x0078, 0x08000058, 0x08, 0x02, 0x0000 },
+    {  45, 0x0078, 0x08000058, 0x09, 0x02, 0x0000 },
+    {  45, 0x0078, 0x08000058, 0x0a, 0x02, 0x0000 },
+    {  45, 0x0078, 0x08000058, 0x0b, 0x02, 0x0000 },
+    {  45, 0x0078, 0x0c000058, 0x0c, 0x02, 0x0000 },
+    {  45, 0x0078, 0x0c000058, 0x0d, 0x02, 0x0000 },
+    {  45, 0x0078, 0x0c000058, 0x0e, 0x02, 0x0000 },
+    {  45, 0x0078, 0x0c000058, 0x0f, 0x02, 0x0000 },
+    {  46, 0x0063, 0x00000043, 0x00, 0x02, 0x0000 },
+    {  46, 0x0043, 0x00000043, 0x01, 0x02, 0x0000 },
+    {  46, 0x0063, 0x00000043, 0x02, 0x02, 0x0000 },
+    {  46, 0x0043, 0x00000043, 0x03, 0x02, 0x0000 },
+    {  46, 0x0063, 0x04000043, 0x04, 0x02, 0x0000 },
+    {  46, 0x0063, 0x04000043, 0x05, 0x02, 0x0000 },
+    {  46, 0x0063, 0x04000043, 0x06, 0x02, 0x0000 },
+    {  46, 0x0063, 0x04000043, 0x07, 0x02, 0x0000 },
+    {  46, 0x0063, 0x08000043, 0x08, 0x02, 0x0000 },
+    {  46, 0x0063, 0x08000043, 0x09, 0x02, 0x0000 },
+    {  46, 0x0063, 0x08000043, 0x0a, 0x02, 0x0000 },
+    {  46, 0x0063, 0x08000043, 0x0b, 0x02, 0x0000 },
+    {  46, 0x0063, 0x0c000043, 0x0c, 0x02, 0x0000 },
+    {  46, 0x0063, 0x0c000043, 0x0d, 0x02, 0x0000 },
+    {  46, 0x0063, 0x0c000043, 0x0e, 0x02, 0x0000 },
+    {  46, 0x0063, 0x0c000043, 0x0f, 0x02, 0x0000 },
+    {  47, 0x0076, 0x00000056, 0x00, 0x02, 0x0000 },
+    {  47, 0x0056, 0x00000056, 0x01, 0x02, 0x0000 },
+    {  47, 0x0076, 0x00000056, 0x02, 0x02, 0x0000 },
+    {  47, 0x0056, 0x00000056, 0x03, 0x02, 0x0000 },
+    {  47, 0x0076, 0x04000056, 0x04, 0x02, 0x0000 },
+    {  47, 0x0076, 0x04000056, 0x05, 0x02, 0x0000 },
+    {  47, 0x0076, 0x04000056, 0x06, 0x02, 0x0000 },
+    {  47, 0x0076, 0x04000056, 0x07, 0x02, 0x0000 },
+    {  47, 0x0076, 0x08000056, 0x08, 0x02, 0x0000 },
+    {  47, 0x0076, 0x08000056, 0x09, 0x02, 0x0000 },
+    {  47, 0x0076, 0x08000056, 0x0a, 0x02, 0x0000 },
+    {  47, 0x0076, 0x08000056, 0x0b, 0x02, 0x0000 },
+    {  47, 0x0076, 0x0c000056, 0x0c, 0x02, 0x0000 },
+    {  47, 0x0076, 0x0c000056, 0x0d, 0x02, 0x0000 },
+    {  47, 0x0076, 0x0c000056, 0x0e, 0x02, 0x0000 },
+    {  47, 0x0076, 0x0c000056, 0x0f, 0x02, 0x0000 },
+    {  48, 0x0062, 0x00000042, 0x00, 0x02, 0x0000 },
+    {  48, 0x0042, 0x00000042, 0x01, 0x02, 0x0000 },
+    {  48, 0x0062, 0x00000042, 0x02, 0x02, 0x0000 },
+    {  48, 0x0042, 0x00000042, 0x03, 0x02, 0x0000 },
+    {  48, 0x0062, 0x04000042, 0x04, 0x02, 0x0000 },
+    {  48, 0x0062, 0x04000042, 0x05, 0x02, 0x0000 },
+    {  48, 0x0062, 0x04000042, 0x06, 0x02, 0x0000 },
+    {  48, 0x0062, 0x04000042, 0x07, 0x02, 0x0000 },
+    {  48, 0x0062, 0x08000042, 0x08, 0x02, 0x0000 },
+    {  48, 0x0062, 0x08000042, 0x09, 0x02, 0x0000 },
+    {  48, 0x0062, 0x08000042, 0x0a, 0x02, 0x0000 },
+    {  48, 0x0062, 0x08000042, 0x0b, 0x02, 0x0000 },
+    {  48, 0x0062, 0x0c000042, 0x0c, 0x02, 0x0000 },
+    {  48, 0x0062, 0x0c000042, 0x0d, 0x02, 0x0000 },
+    {  48, 0x0062, 0x0c000042, 0x0e, 0x02, 0x0000 },
+    {  48, 0x0062, 0x0c000042, 0x0f, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0000004e, 0x00, 0x02, 0x0000 },
+    {  49, 0x004e, 0x0000004e, 0x01, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0000004e, 0x02, 0x02, 0x0000 },
+    {  49, 0x004e, 0x0000004e, 0x03, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0400004e, 0x04, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0400004e, 0x05, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0400004e, 0x06, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0400004e, 0x07, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0800004e, 0x08, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0800004e, 0x09, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0800004e, 0x0a, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0800004e, 0x0b, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0c00004e, 0x0c, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0c00004e, 0x0d, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0c00004e, 0x0e, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0c00004e, 0x0f, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0000004d, 0x00, 0x02, 0x0000 },
+    {  50, 0x004d, 0x0000004d, 0x01, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0000004d, 0x02, 0x02, 0x0000 },
+    {  50, 0x004d, 0x0000004d, 0x03, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0400004d, 0x04, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0400004d, 0x05, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0400004d, 0x06, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0400004d, 0x07, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0800004d, 0x08, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0800004d, 0x09, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0800004d, 0x0a, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0800004d, 0x0b, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0c00004d, 0x0c, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0c00004d, 0x0d, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0c00004d, 0x0e, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0c00004d, 0x0f, 0x02, 0x0000 },
+    {  51, 0x002c, 0x0000002c, 0x00, 0x00, 0x0000 },
+    {  51, 0x003c, 0x0000003c, 0x01, 0x00, 0x0000 },
+    {  51, 0x002c, 0x0100125b, 0x02, 0x01, 0x0000 },
+    {  52, 0x002e, 0x0000002e, 0x00, 0x00, 0x0000 },
+    {  52, 0x003e, 0x0000003e, 0x01, 0x00, 0x0000 },
+    {  52, 0xffff, 0x01001120, 0x02, 0x00, 0x0000 },
+    {  53, 0x002f, 0x0000002f, 0x00, 0x00, 0x0000 },
+    {  53, 0x003f, 0x0000003f, 0x01, 0x00, 0x0000 },
+    {  53, 0xffff, 0x01000003, 0x04, 0x00, 0x0000 },
+    {  54, 0xffff, 0x01000020, 0x00, 0x04, 0x0001 },
+    {  55, 0x002a, 0x2000002a, 0x00, 0x00, 0x0000 },
+    {  56, 0xffff, 0x01000023, 0x00, 0x04, 0x0008 },
+    {  57, 0x0020, 0x00000020, 0x00, 0x00, 0x0000 },
+    {  58, 0xffff, 0x01000024, 0x00, 0x00, 0x0000 },
+    {  59, 0xffff, 0x01000030, 0x00, 0x00, 0x0000 },
+    {  59, 0xffff, 0x0100003c, 0x01, 0x00, 0x0000 },
+    {  59, 0xffff, 0x01000048, 0x04, 0x00, 0x0000 },
+    {  59, 0xffff, 0x01000000, 0x0c, 0x08, 0x0100 },
+    {  60, 0xffff, 0x01000031, 0x00, 0x00, 0x0000 },
+    {  60, 0xffff, 0x0100003d, 0x01, 0x00, 0x0000 },
+    {  60, 0xffff, 0x01000049, 0x04, 0x00, 0x0000 },
+    {  60, 0xffff, 0x01000000, 0x0c, 0x08, 0x0101 },
+    {  61, 0xffff, 0x01000032, 0x00, 0x00, 0x0000 },
+    {  61, 0xffff, 0x0100003e, 0x01, 0x00, 0x0000 },
+    {  61, 0xffff, 0x0100004a, 0x04, 0x00, 0x0000 },
+    {  61, 0xffff, 0x01000000, 0x0c, 0x08, 0x0102 },
+    {  62, 0xffff, 0x01000033, 0x00, 0x00, 0x0000 },
+    {  62, 0xffff, 0x0100003f, 0x01, 0x00, 0x0000 },
+    {  62, 0xffff, 0x0100004b, 0x04, 0x00, 0x0000 },
+    {  62, 0xffff, 0x01000000, 0x0c, 0x08, 0x0103 },
+    {  63, 0xffff, 0x01000034, 0x00, 0x00, 0x0000 },
+    {  63, 0xffff, 0x01000040, 0x01, 0x00, 0x0000 },
+    {  63, 0xffff, 0x0100004c, 0x04, 0x00, 0x0000 },
+    {  63, 0xffff, 0x01000000, 0x0c, 0x08, 0x0104 },
+    {  64, 0xffff, 0x01000035, 0x00, 0x00, 0x0000 },
+    {  64, 0xffff, 0x01000041, 0x01, 0x00, 0x0000 },
+    {  64, 0xffff, 0x0100004d, 0x04, 0x00, 0x0000 },
+    {  64, 0xffff, 0x01000000, 0x0c, 0x08, 0x0105 },
+    {  65, 0xffff, 0x01000036, 0x00, 0x00, 0x0000 },
+    {  65, 0xffff, 0x01000042, 0x01, 0x00, 0x0000 },
+    {  65, 0xffff, 0x0100004e, 0x04, 0x00, 0x0000 },
+    {  65, 0xffff, 0x01000000, 0x0c, 0x08, 0x0106 },
+    {  66, 0xffff, 0x01000037, 0x00, 0x00, 0x0000 },
+    {  66, 0xffff, 0x01000043, 0x01, 0x00, 0x0000 },
+    {  66, 0xffff, 0x0100004f, 0x04, 0x00, 0x0000 },
+    {  66, 0xffff, 0x01000000, 0x0c, 0x08, 0x0107 },
+    {  67, 0xffff, 0x01000038, 0x00, 0x00, 0x0000 },
+    {  67, 0xffff, 0x01000044, 0x01, 0x00, 0x0000 },
+    {  67, 0xffff, 0x01000050, 0x04, 0x00, 0x0000 },
+    {  67, 0xffff, 0x01000000, 0x0c, 0x08, 0x0108 },
+    {  68, 0xffff, 0x01000039, 0x00, 0x00, 0x0000 },
+    {  68, 0xffff, 0x01000045, 0x01, 0x00, 0x0000 },
+    {  68, 0xffff, 0x01000051, 0x04, 0x00, 0x0000 },
+    {  68, 0xffff, 0x01000000, 0x0c, 0x08, 0x0109 },
+    {  69, 0xffff, 0x01000025, 0x00, 0x00, 0x0000 },
+    {  70, 0xffff, 0x01000026, 0x00, 0x00, 0x0000 },
+    {  70, 0xffff, 0x01000026, 0x08, 0x00, 0x0000 },
+    {  71, 0x0037, 0x20000037, 0x00, 0x00, 0x0000 },
+    {  72, 0x0038, 0x20000038, 0x00, 0x00, 0x0000 },
+    {  73, 0x0039, 0x20000039, 0x00, 0x00, 0x0000 },
+    {  74, 0x002d, 0x2000002d, 0x00, 0x00, 0x0000 },
+    {  75, 0x0034, 0x20000034, 0x00, 0x00, 0x0000 },
+    {  76, 0x0035, 0x20000035, 0x00, 0x00, 0x0000 },
+    {  77, 0x0036, 0x20000036, 0x00, 0x00, 0x0000 },
+    {  78, 0x002b, 0x2000002b, 0x00, 0x00, 0x0000 },
+    {  79, 0x0031, 0x20000031, 0x00, 0x00, 0x0000 },
+    {  80, 0x0032, 0x20000032, 0x00, 0x00, 0x0000 },
+    {  81, 0x0033, 0x20000033, 0x00, 0x00, 0x0000 },
+    {  82, 0x0030, 0x20000030, 0x00, 0x00, 0x0000 },
+    {  83, 0x002e, 0x2000002e, 0x00, 0x00, 0x0000 },
+    {  83, 0xffff, 0x01000000, 0x06, 0x08, 0x0200 },
+    {  83, 0xffff, 0x01000000, 0x0c, 0x08, 0x0200 },
+    {  86, 0x003c, 0x0000003c, 0x00, 0x00, 0x0000 },
+    {  86, 0x003e, 0x0000003e, 0x01, 0x00, 0x0000 },
+    {  86, 0x007c, 0x0000007c, 0x02, 0x00, 0x0000 },
+    {  87, 0xffff, 0x0100003a, 0x00, 0x00, 0x0000 },
+    {  87, 0xffff, 0x01000046, 0x01, 0x00, 0x0000 },
+    {  87, 0xffff, 0x01000052, 0x04, 0x00, 0x0000 },
+    {  87, 0xffff, 0x01000000, 0x0c, 0x08, 0x010a },
+    {  88, 0xffff, 0x0100003b, 0x00, 0x00, 0x0000 },
+    {  88, 0xffff, 0x01000047, 0x01, 0x00, 0x0000 },
+    {  88, 0xffff, 0x01000000, 0x0c, 0x08, 0x010b },
+    {  89, 0xffff, 0x21000005, 0x00, 0x00, 0x0000 },
+    {  90, 0xffff, 0x01000021, 0x00, 0x04, 0x0004 },
+    {  91, 0x002f, 0x2000002f, 0x00, 0x00, 0x0000 },
+    {  92, 0x005c, 0x0400005c, 0x00, 0x00, 0x0000 },
+    {  93, 0xffff, 0x01001103, 0x00, 0x04, 0x0002 },
+    {  94, 0xffff, 0x01000010, 0x00, 0x00, 0x0000 },
+    {  95, 0xffff, 0x01000013, 0x00, 0x00, 0x0000 },
+    {  96, 0xffff, 0x01000016, 0x00, 0x00, 0x0000 },
+    {  97, 0xffff, 0x01000012, 0x00, 0x00, 0x0000 },
+    {  97, 0xffff, 0x01000000, 0x0c, 0x08, 0x0180 },
+    {  98, 0xffff, 0x01000014, 0x00, 0x00, 0x0000 },
+    {  98, 0xffff, 0x01000000, 0x0c, 0x08, 0x0181 },
+    {  99, 0xffff, 0x01000011, 0x00, 0x00, 0x0000 },
+    { 100, 0xffff, 0x01000015, 0x00, 0x00, 0x0000 },
+    { 101, 0xffff, 0x01000017, 0x00, 0x00, 0x0000 },
+    { 102, 0xffff, 0x01000006, 0x00, 0x00, 0x0000 },
+    { 103, 0xffff, 0x01000007, 0x00, 0x00, 0x0000 },
+    { 103, 0xffff, 0x01000000, 0x06, 0x08, 0x0200 },
+    { 103, 0xffff, 0x01000000, 0x0c, 0x08, 0x0200 },
+
+#if 0
+    // 113 -> 248
+    { KEY_MUTE,         0xffff, Qt::Key_VolumeMute,     0x00, 0x00, 0x0000 },
+    { KEY_VOLUMEDOWN,   0xffff, Qt::Key_VolumeDown,     0x00, 0x00, 0x0000 },
+    { KEY_VOLUMEUP,     0xffff, Qt::Key_VolumeUp,       0x00, 0x00, 0x0000 },
+    { KEY_POWER,        0xffff, Qt::Key_PowerOff,       0x00, 0x00, 0x0000 },
+    { KEY_PAUSE,        0xffff, Qt::Key_Pause,          0x00, 0x00, 0x0000 },
+    { KEY_STOP,         0xffff, Qt::Key_Stop,           0x00, 0x00, 0x0000 },
+    { KEY_SETUP,        0xffff, Qt::Key_Settings,       0x00, 0x00, 0x0000 },
+    { KEY_RECORD,       0xffff, Qt::Key_MediaRecord,    0x00, 0x00, 0x0000 },
+    { KEY_REWIND,       0xffff, Qt::Key_AudioRewind,    0x00, 0x00, 0x0000 },
+    { KEY_PLAYPAUSE,    0xffff, Qt::Key_MediaTogglePlayPause,  0x00, 0x00, 0x0000 },
+    { KEY_PLAY,         0xffff, Qt::Key_MediaPlay,      0x00, 0x00, 0x0000 },
+    { KEY_FASTFORWARD,  0xffff, Qt::Key_AudioForward,   0x00, 0x00, 0x0000 },
+    { KEY_CANCEL,       0xffff, Qt::Key_Cancel,         0x00, 0x00, 0x0000 },
+    { 248,              0xffff, Qt::Key_MicMute,        0x00, 0x00, 0x0000 },
+    // 0x160 ->
+    { KEY_SELECT,       0xffff, Qt::Key_Select,         0x00, 0x00, 0x0000 },
+    { KEY_CLEAR,        0xffff, Qt::Key_Clear,          0x00, 0x00, 0x0000 },
+    { KEY_EXIT,         0xffff, Qt::Key_Exit,           0x00, 0x00, 0x0000 },
+    { KEY_INFO,         0xffff, Qt::Key_Info,           0x00, 0x00, 0x0000 },
+    { KEY_PROGRAM,      0xffff, Qt::Key_Guide,          0x00, 0x00, 0x0000 },
+    { KEY_CALENDAR,     0xffff, Qt::Key_Calendar,       0x00, 0x00, 0x0000 },
+    { KEY_RED,          0xffff, Qt::Key_Red,            0x00, 0x00, 0x0000 },
+    { KEY_GREEN,        0xffff, Qt::Key_Green,          0x00, 0x00, 0x0000 },
+    { KEY_YELLOW,       0xffff, Qt::Key_Yellow,         0x00, 0x00, 0x0000 },
+    { KEY_BLUE,         0xffff, Qt::Key_Blue,           0x00, 0x00, 0x0000 },
+    { KEY_CHANNELUP,    0xffff, Qt::Key_ChannelUp,      0x00, 0x00, 0x0000 },
+    { KEY_CHANNELDOWN,  0xffff, Qt::Key_ChannelDown,    0x00, 0x00, 0x0000 },
+#endif
+};
+
+const QBsdKeyboardMap::Composing QBsdKeyboardHandler::s_keycompose_default[] = {
+    { 0x0060, 0x0041, 0x00c0 },
+    { 0x0060, 0x0061, 0x00e0 },
+    { 0x0027, 0x0041, 0x00c1 },
+    { 0x0027, 0x0061, 0x00e1 },
+    { 0x005e, 0x0041, 0x00c2 },
+    { 0x005e, 0x0061, 0x00e2 },
+    { 0x007e, 0x0041, 0x00c3 },
+    { 0x007e, 0x0061, 0x00e3 },
+    { 0x0022, 0x0041, 0x00c4 },
+    { 0x0022, 0x0061, 0x00e4 },
+    { 0x002d, 0x0061, 0x00aa },
+    { 0x002d, 0x0041, 0x00aa },
+    { 0x004f, 0x0041, 0x00c5 },
+    { 0x006f, 0x0061, 0x00e5 },
+    { 0x0030, 0x0041, 0x00c5 },
+    { 0x0030, 0x0061, 0x00e5 },
+    { 0x0041, 0x0041, 0x00c5 },
+    { 0x0061, 0x0061, 0x00e5 },
+    { 0x00b0, 0x0041, 0x00c5 },
+    { 0x00b0, 0x0061, 0x00e5 },
+    { 0x0041, 0x0045, 0x00c6 },
+    { 0x0061, 0x0065, 0x00e6 },
+    { 0x002c, 0x0043, 0x00c7 },
+    { 0x002c, 0x0063, 0x00e7 },
+    { 0x005e, 0x0043, 0x00c7 },
+    { 0x005e, 0x0063, 0x00e7 },
+    { 0x0060, 0x0045, 0x00c8 },
+    { 0x0060, 0x0065, 0x00e8 },
+    { 0x0027, 0x0045, 0x00c9 },
+    { 0x0027, 0x0065, 0x00e9 },
+    { 0x005e, 0x0045, 0x00ca },
+    { 0x005e, 0x0065, 0x00ea },
+    { 0x0022, 0x0045, 0x00cb },
+    { 0x0022, 0x0065, 0x00eb },
+    { 0x0060, 0x0049, 0x00cc },
+    { 0x0060, 0x0069, 0x00ec },
+    { 0x0027, 0x0049, 0x00cd },
+    { 0x0027, 0x0069, 0x00ed },
+    { 0x005e, 0x0049, 0x00ce },
+    { 0x005e, 0x0069, 0x00ee },
+    { 0x0022, 0x0049, 0x00cf },
+    { 0x0022, 0x0069, 0x00ef },
+    { 0x002d, 0x0044, 0x00d0 },
+    { 0x002d, 0x0064, 0x00f0 },
+    { 0x005e, 0x0044, 0x00d0 },
+    { 0x005e, 0x0064, 0x00f0 },
+    { 0x007e, 0x004e, 0x00d1 },
+    { 0x007e, 0x006e, 0x00f1 },
+    { 0x005e, 0x004e, 0x00d1 },
+    { 0x005e, 0x006e, 0x00f1 },
+    { 0x0060, 0x004f, 0x00d2 },
+    { 0x0060, 0x006f, 0x00f2 },
+    { 0x0027, 0x004f, 0x00d3 },
+    { 0x0027, 0x006f, 0x00f3 },
+    { 0x005e, 0x004f, 0x00d4 },
+    { 0x005e, 0x006f, 0x00f4 },
+    { 0x007e, 0x004f, 0x00d5 },
+    { 0x007e, 0x006f, 0x00f5 },
+    { 0x0022, 0x004f, 0x00d6 },
+    { 0x0022, 0x006f, 0x00f6 },
+    { 0x002f, 0x004f, 0x00d8 },
+    { 0x002f, 0x006f, 0x00f8 },
+    { 0x002d, 0x006f, 0x00ba },
+    { 0x002d, 0x004f, 0x00ba },
+    { 0x0060, 0x0055, 0x00d9 },
+    { 0x0060, 0x0075, 0x00f9 },
+    { 0x0027, 0x0055, 0x00da },
+    { 0x0027, 0x0075, 0x00fa },
+    { 0x005e, 0x0055, 0x00db },
+    { 0x005e, 0x0075, 0x00fb },
+    { 0x0022, 0x0055, 0x00dc },
+    { 0x0022, 0x0075, 0x00fc },
+    { 0x0027, 0x0059, 0x00dd },
+    { 0x0027, 0x0079, 0x00fd },
+    { 0x0054, 0x0048, 0x00de },
+    { 0x0074, 0x0068, 0x00fe },
+    { 0x0073, 0x0073, 0x00df },
+    { 0x0022, 0x0079, 0x00ff },
+    { 0x0073, 0x007a, 0x00df },
+    { 0x006e, 0x006e, 0x00f1 },
+    { 0x006e, 0x0068, 0x00f1 },
+    { 0x004e, 0x0059, 0x00d1 },
+    { 0x004e, 0x004e, 0x00d1 },
+    { 0x004e, 0x0048, 0x00d1 },
+    { 0x004e, 0x0079, 0x00d1 },
+    { 0x004e, 0x006e, 0x00d1 },
+    { 0x004e, 0x0068, 0x00d1 },
+    { 0x002d, 0x004c, 0x00a3 },
+    { 0x003c, 0x003c, 0x00ab },
+    { 0x003e, 0x003e, 0x00bb },
+    { 0x003f, 0x003f, 0x00bf },
+    { 0x005e, 0x003f, 0x00bf },
+    { 0x0021, 0x0021, 0x00a1 },
+    { 0x005e, 0x0021, 0x00a1 },
+    { 0x005e, 0x0031, 0x00b9 },
+    { 0x005e, 0x0032, 0x00b2 },
+    { 0x005e, 0x0033, 0x00b3 },
+    { 0x002b, 0x002d, 0x00b1 },
+    { 0x0063, 0x003d, 0x00a2 },
+    { 0x0063, 0x002f, 0x00a2 },
+    { 0x002f, 0x0063, 0x00a2 },
+    { 0x002d, 0x0063, 0x00a2 },
+    { 0x002d, 0x0043, 0x00a2 },
+    { 0x004c, 0x003d, 0x00a3 },
+    { 0x002d, 0x004c, 0x00a3 },
+    { 0x002d, 0x006c, 0x00a3 },
+    { 0x005e, 0x002a, 0x00d7 },
+    { 0x005e, 0x0078, 0x00d7 },
+    { 0x0078, 0x0078, 0x00d7 },
+    { 0x005e, 0x002e, 0x00b7 },
+    { 0x002e, 0x002e, 0x00b7 },
+    { 0x005e, 0x002f, 0x00f7 },
+    { 0x005e, 0x003a, 0x00f7 },
+    { 0x002d, 0x003a, 0x00f7 },
+    { 0x003a, 0x002d, 0x00f7 },
+    { 0x0059, 0x003d, 0x00a5 },
+    { 0x002d, 0x0059, 0x00a5 },
+    { 0x002d, 0x006c, 0x00a5 },
+    { 0x0028, 0x0063, 0x00a9 },
+    { 0x0022, 0x0063, 0x00a9 },
+    { 0x002d, 0x0061, 0x00aa },
+    { 0x002d, 0x0041, 0x00aa },
+    { 0x002d, 0x006f, 0x00ba },
+    { 0x002d, 0x004f, 0x00ba },
+    { 0x0028, 0x0072, 0x00ae },
+    { 0x0022, 0x0072, 0x00ae },
+    { 0x006d, 0x0075, 0x00b5 },
+    { 0x0031, 0x0034, 0x0152 },
+    { 0x0031, 0x0032, 0x0153 },
+    { 0x0033, 0x0034, 0x0178 },
+    { 0x0065, 0x003d, 0x20ac },
+    { 0x002d, 0x0065, 0x20ac },
+    { 0x002d, 0x0045, 0x20ac },
+    { 0x0076, 0x0053, 0x0160 },
+    { 0x005e, 0x0053, 0x0160 },
+    { 0x0076, 0x0073, 0x0161 },
+    { 0x005e, 0x0073, 0x0161 },
+    { 0x0076, 0x005a, 0x017d },
+    { 0x005e, 0x005a, 0x017d },
+    { 0x0076, 0x007a, 0x017e },
+    { 0x005e, 0x007a, 0x017e },
+    { 0x004f, 0x0045, 0x0152 },
+    { 0x004f, 0x0065, 0x0152 },
+    { 0x006f, 0x0065, 0x0153 },
+    { 0x0022, 0x0059, 0x0178 },
+    { 0x0069, 0x006a, 0x00ff },
+    { 0x0049, 0x004a, 0x0178 },
+};
+
+#endif // QEVDEVKEYBOARDHANDLER_DEFAULTMAP_P_H
diff -Naur src/plugins/generic/bsdsysmouse.orig/bsdsysmouse.json src/plugins/generic/bsdsysmouse/bsdsysmouse.json
--- src/plugins/generic/bsdsysmouse.orig/bsdsysmouse.json	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/generic/bsdsysmouse/bsdsysmouse.json	2016-03-08 12:43:58.414074000 -0800
@@ -0,0 +1,3 @@
+{
+    "Keys": [ "BsdSysMouse" ]
+}
diff -Naur src/plugins/generic/bsdsysmouse.orig/bsdsysmouse.pro src/plugins/generic/bsdsysmouse/bsdsysmouse.pro
--- src/plugins/generic/bsdsysmouse.orig/bsdsysmouse.pro	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/generic/bsdsysmouse/bsdsysmouse.pro	2016-03-08 12:43:58.414139000 -0800
@@ -0,0 +1,16 @@
+TARGET = qbsdsysmouseplugin
+
+PLUGIN_TYPE = generic
+PLUGIN_EXTENDS = -
+PLUGIN_CLASS_NAME = QBsdSysMousePlugin
+load(qt_plugin)
+
+QT += core-private gui-private
+
+HEADERS = qbsdsysmouse.h
+SOURCES = main.cpp \
+         qbsdsysmouse.cpp
+
+OTHER_FILES += \
+    qbsdsysmouse.json
+
diff -Naur src/plugins/generic/bsdsysmouse.orig/main.cpp src/plugins/generic/bsdsysmouse/main.cpp
--- src/plugins/generic/bsdsysmouse.orig/main.cpp	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/generic/bsdsysmouse/main.cpp	2016-03-08 12:43:58.414214000 -0800
@@ -0,0 +1,66 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the plugins of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights. These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtGui/qgenericplugin.h>
+#include "qbsdsysmouse.h"
+
+QT_BEGIN_NAMESPACE
+
+class QBsdSysMousePlugin : public QGenericPlugin
+{
+    Q_OBJECT
+    Q_PLUGIN_METADATA(IID "org.qt-project.Qt.QGenericPluginFactoryInterface" FILE "bsdsysmouse.json")
+
+public:
+    QBsdSysMousePlugin();
+
+    QObject* create(const QString &key, const QString &specification);
+};
+
+QBsdSysMousePlugin::QBsdSysMousePlugin()
+    : QGenericPlugin()
+{
+}
+
+QObject* QBsdSysMousePlugin::create(const QString &key,
+                                   const QString &specification)
+{
+    if (!key.compare(QLatin1String("BsdSysMouse"), Qt::CaseInsensitive)) {
+        return new QBsdSysMouseHandler(key, specification);
+    }
+    return 0;
+}
+
+QT_END_NAMESPACE
+
+#include "main.moc"
diff -Naur src/plugins/generic/bsdsysmouse.orig/qbsdsysmouse.cpp src/plugins/generic/bsdsysmouse/qbsdsysmouse.cpp
--- src/plugins/generic/bsdsysmouse.orig/qbsdsysmouse.cpp	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/generic/bsdsysmouse/qbsdsysmouse.cpp	2016-03-08 12:43:58.414302000 -0800
@@ -0,0 +1,154 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights. These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+
+#include "qbsdsysmouse.h"
+
+
+#include <QSocketNotifier>
+#include <QStringList>
+#include <QPoint>
+#include <QGuiApplication>
+#include <qpa/qwindowsysteminterface.h>
+
+#include <errno.h>
+
+#include <qdebug.h>
+
+#include <sys/mouse.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+QT_BEGIN_NAMESPACE
+
+QBsdSysMouseHandler::QBsdSysMouseHandler(const QString &key,
+                                                 const QString &specification)
+    : m_notify(0), m_packet_size(0), m_x(0), m_y(0), m_xoffset(0), m_yoffset(0), m_buttons(Qt::NoButton)
+{
+    QString device;
+    int level;
+
+    // qDebug() << "QBsdSysMouseHandler" << key << specification;
+    setObjectName(QLatin1String("BSD Sysmouse Handler"));
+
+    if (specification.startsWith("/dev/"))
+        device = specification.toLocal8Bit();
+
+    if (device.isEmpty())
+        device = QByteArrayLiteral("/dev/sysmouse");
+
+    m_dev_fd = open(device.toLatin1(), O_RDONLY);
+    if (m_dev_fd < 0) {
+        qErrnoWarning(errno, "open(%s) failed", (const char*)device.toLatin1());
+        return;
+    }
+
+    if (::ioctl(m_dev_fd, MOUSE_GETLEVEL, &level)) {
+        qErrnoWarning(errno, "ioctl(%s, MOUSE_GETLEVEL) failed", (const char*)device.toLatin1());
+        m_packet_size = 5;
+    }
+    else {
+        if (level)
+            m_packet_size = 8;
+        else
+            m_packet_size = 5;
+    }
+
+    if (fcntl(m_dev_fd, F_SETFL, O_NONBLOCK)) {
+        qErrnoWarning(errno, "fcntl(%s, F_SETFL, O_NONBLOCK) failed", (const char*)device.toLatin1());
+    }
+
+    if (m_dev_fd >= 0) {
+        m_notify = new QSocketNotifier(m_dev_fd, QSocketNotifier::Read, this);
+        connect(m_notify, SIGNAL(activated(int)), this, SLOT(readMouseData()));
+    } else {
+        qWarning("Cannot open mouse input device '%s': %s", (const char*)device.toLatin1(), strerror(errno));
+    }
+}
+
+
+QBsdSysMouseHandler::~QBsdSysMouseHandler()
+{
+    if (m_dev_fd != -1)
+        close(m_dev_fd);
+}
+
+
+void QBsdSysMouseHandler::readMouseData()
+{
+    int8_t packet[MOUSE_SYS_PACKETSIZE];
+    uint8_t status;
+    int16_t relx, rely;
+    int bytes;
+
+    if (m_dev_fd < 0)
+        return;
+
+    if (m_packet_size == 0)
+        return;
+
+    while ((bytes = read(m_dev_fd, packet, m_packet_size)) == m_packet_size) {
+        relx = packet[1] + packet[3];
+        rely = -(packet[2] + packet[4]);
+
+        m_x += relx;
+        m_y += rely;
+
+        status = packet[0] & MOUSE_SYS_STDBUTTONS;
+    }
+
+    // clamp to screen geometry
+    QRect g = QGuiApplication::primaryScreen()->virtualGeometry();
+    if (m_x + m_xoffset < g.left())
+        m_x = g.left() - m_xoffset;
+    else if (m_x + m_xoffset > g.right())
+        m_x = g.right() - m_xoffset;
+
+    if (m_y + m_yoffset < g.top())
+        m_y = g.top() - m_yoffset;
+    else if (m_y + m_yoffset > g.bottom())
+        m_y = g.bottom() - m_yoffset;
+
+    QPoint pos(m_x + m_xoffset, m_y + m_yoffset);
+    m_buttons = Qt::NoButton;
+    if (!(status & MOUSE_SYS_BUTTON1UP))
+	m_buttons |= Qt::LeftButton;
+    if (!(status & MOUSE_SYS_BUTTON2UP))
+	m_buttons |= Qt::MiddleButton;
+    if (!(status & MOUSE_SYS_BUTTON3UP))
+	m_buttons |= Qt::RightButton;
+    
+    QWindowSystemInterface::handleMouseEvent(0, pos, pos, m_buttons);
+}
+
+QT_END_NAMESPACE
diff -Naur src/plugins/generic/bsdsysmouse.orig/qbsdsysmouse.h src/plugins/generic/bsdsysmouse/qbsdsysmouse.h
--- src/plugins/generic/bsdsysmouse.orig/qbsdsysmouse.h	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/generic/bsdsysmouse/qbsdsysmouse.h	2016-03-08 12:43:58.414380000 -0800
@@ -0,0 +1,65 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights. These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QTSLIB_H
+#define QTSLIB_H
+
+#include <qobject.h>
+//#include <Qt>
+
+QT_BEGIN_NAMESPACE
+
+class QSocketNotifier;
+
+class QBsdSysMouseHandler : public QObject
+{
+    Q_OBJECT
+public:
+    QBsdSysMouseHandler(const QString &key, const QString &specification);
+    ~QBsdSysMouseHandler();
+
+private slots:
+    void readMouseData();
+
+private:
+    QSocketNotifier * m_notify;
+    int m_dev_fd;
+    int m_packet_size;
+    int m_x, m_y;
+    int m_xoffset, m_yoffset;
+    Qt::MouseButtons m_buttons;
+};
+
+QT_END_NAMESPACE
+
+#endif // QTSLIB_H
