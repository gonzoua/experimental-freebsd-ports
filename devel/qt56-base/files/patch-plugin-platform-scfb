diff -Naur src/plugins/platforms/scfb.orig/main.cpp src/plugins/platforms/scfb/main.cpp
--- src/plugins/platforms/scfb.orig/main.cpp	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/platforms/scfb/main.cpp	2015-11-09 22:42:44.622890000 -0800
@@ -0,0 +1,59 @@
+/****************************************************************************
+**
+** Copyright (C) 2015 The Qt Company Ltd.
+** Contact: http://www.qt.io/licensing/
+**
+** This file is part of the plugins of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see http://www.qt.io/terms-conditions. For further
+** information use the contact form at http://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** As a special exception, The Qt Company gives you certain additional
+** rights. These rights are described in The Qt Company LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <qpa/qplatformintegrationplugin.h>
+#include "qscfbintegration.h"
+
+QT_BEGIN_NAMESPACE
+
+class QScFbIntegrationPlugin : public QPlatformIntegrationPlugin
+{
+    Q_OBJECT
+    Q_PLUGIN_METADATA(IID QPlatformIntegrationFactoryInterface_iid FILE "scfb.json")
+public:
+    QPlatformIntegration *create(const QString&, const QStringList&) Q_DECL_OVERRIDE;
+};
+
+QPlatformIntegration* QScFbIntegrationPlugin::create(const QString& system, const QStringList& paramList)
+{
+    Q_UNUSED(paramList);
+    if (!system.compare(QLatin1String("scfb"), Qt::CaseInsensitive))
+        return new QScFbIntegration(paramList);
+
+    return 0;
+}
+
+QT_END_NAMESPACE
+
+#include "main.moc"
+
diff -Naur src/plugins/platforms/scfb.orig/qscfbintegration.cpp src/plugins/platforms/scfb/qscfbintegration.cpp
--- src/plugins/platforms/scfb.orig/qscfbintegration.cpp	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/platforms/scfb/qscfbintegration.cpp	2015-11-09 22:42:44.622771000 -0800
@@ -0,0 +1,151 @@
+/****************************************************************************
+**
+** Copyright (C) 2015 The Qt Company Ltd.
+** Contact: http://www.qt.io/licensing/
+**
+** This file is part of the plugins of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see http://www.qt.io/terms-conditions. For further
+** information use the contact form at http://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** As a special exception, The Qt Company gives you certain additional
+** rights. These rights are described in The Qt Company LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qscfbintegration.h"
+#include "qscfbscreen.h"
+
+#include <QtPlatformSupport/private/qgenericunixfontdatabase_p.h>
+#include <QtPlatformSupport/private/qgenericunixservices_p.h>
+#include <QtPlatformSupport/private/qgenericunixeventdispatcher_p.h>
+
+#include <QtPlatformSupport/private/qfbvthandler_p.h>
+#include <QtPlatformSupport/private/qfbbackingstore_p.h>
+#include <QtPlatformSupport/private/qfbwindow_p.h>
+#include <QtPlatformSupport/private/qfbcursor_p.h>
+
+#include <QtGui/private/qguiapplication_p.h>
+#include <qpa/qplatforminputcontextfactory_p.h>
+
+#if !defined(QT_NO_EVDEV) && (!defined(Q_OS_ANDROID) || defined(Q_OS_ANDROID_NO_SDK))
+#include <QtPlatformSupport/private/qevdevmousemanager_p.h>
+#include <QtPlatformSupport/private/qevdevkeyboardmanager_p.h>
+#include <QtPlatformSupport/private/qevdevtouchmanager_p.h>
+#endif
+
+#if !defined(QT_NO_TSLIB) && (!defined(Q_OS_ANDROID) || defined(Q_OS_ANDROID_NO_SDK))
+#include <QtPlatformSupport/private/qtslib_p.h>
+#endif
+
+QT_BEGIN_NAMESPACE
+
+QScFbIntegration::QScFbIntegration(const QStringList &paramList)
+    : m_fontDb(new QGenericUnixFontDatabase),
+      m_services(new QGenericUnixServices)
+{
+    m_primaryScreen = new QScFbScreen(paramList);
+}
+
+QScFbIntegration::~QScFbIntegration()
+{
+    destroyScreen(m_primaryScreen);
+}
+
+void QScFbIntegration::initialize()
+{
+    if (m_primaryScreen->initialize())
+        screenAdded(m_primaryScreen);
+    else
+        qWarning("scfb: Failed to initialize screen");
+
+    m_inputContext = QPlatformInputContextFactory::create();
+
+    m_nativeInterface.reset(new QPlatformNativeInterface);
+
+    m_vtHandler.reset(new QFbVtHandler);
+
+    if (!qEnvironmentVariableIntValue("QT_QPA_FB_DISABLE_INPUT"))
+        createInputHandlers();
+}
+
+bool QScFbIntegration::hasCapability(QPlatformIntegration::Capability cap) const
+{
+    switch (cap) {
+    case ThreadedPixmaps: return true;
+    case WindowManagement: return false;
+    default: return QPlatformIntegration::hasCapability(cap);
+    }
+}
+
+QPlatformBackingStore *QScFbIntegration::createPlatformBackingStore(QWindow *window) const
+{
+    return new QFbBackingStore(window);
+}
+
+QPlatformWindow *QScFbIntegration::createPlatformWindow(QWindow *window) const
+{
+    return new QFbWindow(window);
+}
+
+QAbstractEventDispatcher *QScFbIntegration::createEventDispatcher() const
+{
+    return createUnixEventDispatcher();
+}
+
+QList<QPlatformScreen *> QScFbIntegration::screens() const
+{
+    QList<QPlatformScreen *> list;
+    list.append(m_primaryScreen);
+    return list;
+}
+
+QPlatformFontDatabase *QScFbIntegration::fontDatabase() const
+{
+    return m_fontDb.data();
+}
+
+QPlatformServices *QScFbIntegration::services() const
+{
+    return m_services.data();
+}
+
+void QScFbIntegration::createInputHandlers()
+{
+#if !defined(QT_NO_EVDEV) && (!defined(Q_OS_ANDROID) || defined(Q_OS_ANDROID_NO_SDK))
+    new QEvdevKeyboardManager(QLatin1String("EvdevKeyboard"), QString(), this);
+    new QEvdevMouseManager(QLatin1String("EvdevMouse"), QString(), this);
+#ifndef QT_NO_TSLIB
+    const bool useTslib = qEnvironmentVariableIntValue("QT_QPA_FB_TSLIB");
+    if (useTslib)
+        new QTsLibMouseHandler(QLatin1String("TsLib"), QString());
+    else
+#endif // QT_NO_TSLIB
+        new QEvdevTouchManager(QLatin1String("EvdevTouch"), QString() /* spec */, this);
+#endif
+}
+
+QPlatformNativeInterface *QScFbIntegration::nativeInterface() const
+{
+    return m_nativeInterface.data();
+}
+
+QT_END_NAMESPACE
diff -Naur src/plugins/platforms/scfb.orig/qscfbintegration.h src/plugins/platforms/scfb/qscfbintegration.h
--- src/plugins/platforms/scfb.orig/qscfbintegration.h	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/platforms/scfb/qscfbintegration.h	2015-11-09 22:42:44.622693000 -0800
@@ -0,0 +1,81 @@
+/****************************************************************************
+**
+** Copyright (C) 2015 The Qt Company Ltd.
+** Contact: http://www.qt.io/licensing/
+**
+** This file is part of the plugins of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see http://www.qt.io/terms-conditions. For further
+** information use the contact form at http://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** As a special exception, The Qt Company gives you certain additional
+** rights. These rights are described in The Qt Company LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QLINUXFBINTEGRATION_H
+#define QLINUXFBINTEGRATION_H
+
+#include <qpa/qplatformintegration.h>
+#include <qpa/qplatformnativeinterface.h>
+
+QT_BEGIN_NAMESPACE
+
+class QAbstractEventDispatcher;
+class QScFbScreen;
+class QFbVtHandler;
+
+class QScFbIntegration : public QPlatformIntegration, public QPlatformNativeInterface
+{
+public:
+    QScFbIntegration(const QStringList &paramList);
+    ~QScFbIntegration();
+
+    void initialize() Q_DECL_OVERRIDE;
+    bool hasCapability(QPlatformIntegration::Capability cap) const Q_DECL_OVERRIDE;
+
+    QPlatformWindow *createPlatformWindow(QWindow *window) const Q_DECL_OVERRIDE;
+    QPlatformBackingStore *createPlatformBackingStore(QWindow *window) const Q_DECL_OVERRIDE;
+
+    QAbstractEventDispatcher *createEventDispatcher() const Q_DECL_OVERRIDE;
+
+    QPlatformFontDatabase *fontDatabase() const Q_DECL_OVERRIDE;
+    QPlatformServices *services() const Q_DECL_OVERRIDE;
+    QPlatformInputContext *inputContext() const Q_DECL_OVERRIDE { return m_inputContext; }
+
+    QPlatformNativeInterface *nativeInterface() const Q_DECL_OVERRIDE;
+
+    QList<QPlatformScreen *> screens() const;
+
+private:
+    void createInputHandlers();
+
+    QScFbScreen *m_primaryScreen;
+    QPlatformInputContext *m_inputContext;
+    QScopedPointer<QPlatformFontDatabase> m_fontDb;
+    QScopedPointer<QPlatformServices> m_services;
+    QScopedPointer<QFbVtHandler> m_vtHandler;
+    QScopedPointer<QPlatformNativeInterface> m_nativeInterface;
+};
+
+QT_END_NAMESPACE
+
+#endif // QLINUXFBINTEGRATION_H
diff -Naur src/plugins/platforms/scfb.orig/qscfbscreen.cpp src/plugins/platforms/scfb/qscfbscreen.cpp
--- src/plugins/platforms/scfb.orig/qscfbscreen.cpp	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/platforms/scfb/qscfbscreen.cpp	2015-11-09 22:42:44.622732000 -0800
@@ -0,0 +1,254 @@
+/****************************************************************************
+**
+** Copyright (C) 2015 The Qt Company Ltd.
+** Contact: http://www.qt.io/licensing/
+**
+** This file is part of the plugins of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see http://www.qt.io/terms-conditions. For further
+** information use the contact form at http://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** As a special exception, The Qt Company gives you certain additional
+** rights. These rights are described in The Qt Company LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qscfbscreen.h"
+#include <QtPlatformSupport/private/qfbcursor_p.h>
+#include <QtPlatformSupport/private/qfbwindow_p.h>
+#include <QtCore/QRegularExpression>
+#include <QtGui/QPainter>
+
+#include <private/qcore_unix_p.h> // overrides QT_OPEN
+#include <qimage.h>
+#include <qdebug.h>
+
+#include <unistd.h>
+#include <stdlib.h>
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/mman.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <stdio.h>
+#include <limits.h>
+#include <signal.h>
+
+#include <sys/consio.h>
+#include <sys/fbio.h>
+
+QT_BEGIN_NAMESPACE
+
+static int openFramebufferDevice(const QString &dev)
+{
+    int fd = -1;
+
+    if (access(dev.toLatin1().constData(), R_OK|W_OK) == 0)
+        fd = QT_OPEN(dev.toLatin1().constData(), O_RDWR);
+
+    if (fd == -1) {
+        if (access(dev.toLatin1().constData(), R_OK) == 0)
+            fd = QT_OPEN(dev.toLatin1().constData(), O_RDONLY);
+    }
+
+    return fd;
+}
+
+static QSizeF determinePhysicalSize(const QSize &mmSize, const QSize &res)
+{
+    int mmWidth = mmSize.width(), mmHeight = mmSize.height();
+
+    if (mmWidth <= 0 && mmHeight <= 0) {
+        const int dpi = 100;
+        mmWidth = qRound(res.width() * 25.4 / dpi);
+        mmHeight = qRound(res.height() * 25.4 / dpi);
+    } else if (mmWidth > 0 && mmHeight <= 0) {
+        mmHeight = res.height() * mmWidth/res.width();
+    } else if (mmHeight > 0 && mmWidth <= 0) {
+        mmWidth = res.width() * mmHeight/res.height();
+    }
+
+    return QSize(mmWidth, mmHeight);
+}
+
+
+
+QScFbScreen::QScFbScreen(const QStringList &args)
+    : mArgs(args), mFbFd(-1), mBlitter(0)
+{
+}
+
+QScFbScreen::~QScFbScreen()
+{
+    if (mFbFd != -1) {
+        munmap(mMmap.data - mMmap.offset, mMmap.size);
+        close(mFbFd);
+    }
+
+    delete mBlitter;
+}
+
+bool QScFbScreen::initialize()
+{
+    QRegularExpression ttyRx(QLatin1String("tty=(.*)"));
+    QRegularExpression fbRx(QLatin1String("fb=(.*)"));
+    QRegularExpression mmSizeRx(QLatin1String("mmsize=(\\d+)x(\\d+)"));
+    QRegularExpression sizeRx(QLatin1String("size=(\\d+)x(\\d+)"));
+    QRegularExpression offsetRx(QLatin1String("offset=(\\d+)x(\\d+)"));
+
+    QString fbDevice, ttyDevice;
+    QSize userMmSize;
+    QRect userGeometry;
+    bool doSwitchToGraphicsMode = true;
+
+    // Parse arguments
+    foreach (const QString &arg, mArgs) {
+        QRegularExpressionMatch match;
+        if (arg == QLatin1String("nographicsmodeswitch"))
+            doSwitchToGraphicsMode = false;
+        else if (arg.contains(mmSizeRx, &match))
+            userMmSize = QSize(match.captured(1).toInt(), match.captured(2).toInt());
+        else if (arg.contains(sizeRx, &match))
+            userGeometry.setSize(QSize(match.captured(1).toInt(), match.captured(2).toInt()));
+        else if (arg.contains(offsetRx, &match))
+            userGeometry.setTopLeft(QPoint(match.captured(1).toInt(), match.captured(2).toInt()));
+        else if (arg.contains(ttyRx, &match))
+            ttyDevice = match.captured(1);
+        else if (arg.contains(fbRx, &match))
+            fbDevice = match.captured(1);
+    }
+
+    if (fbDevice.isEmpty()) {
+        fbDevice = QLatin1String("/dev/fb0");
+        if (!QFile::exists(fbDevice))
+            fbDevice = QLatin1String("/dev/graphics/fb0");
+        if (!QFile::exists(fbDevice)) {
+            qWarning("Unable to figure out framebuffer device. Specify it manually.");
+            return false;
+        }
+    }
+
+    // Open the device
+    mFbFd = openFramebufferDevice(fbDevice);
+    if (mFbFd == -1) {
+        qErrnoWarning(errno, "Failed to open framebuffer %s", qPrintable(fbDevice));
+        return false;
+    }
+
+    struct fbtype fb;
+    int line_length;
+
+    if (ioctl(mFbFd, FBIOGTYPE, &fb) != 0) {
+        qErrnoWarning(errno, "Error reading framebuffer information");
+        return false;
+    }
+
+    if (ioctl(mFbFd, FBIO_GETLINEWIDTH, &line_length) != 0) {
+        qErrnoWarning(errno, "Error reading line length information");
+        return false;
+    }
+
+    mDepth = fb.fb_depth;
+
+    mBytesPerLine = line_length;
+    // TODO: userGeometry here?
+    QRect geometry = QRect(0, 0, fb.fb_width, fb.fb_height);
+    mGeometry = QRect(QPoint(0, 0), geometry.size());
+    switch (mDepth) {
+        case 32:
+    	    mFormat = QImage::Format_RGB32;
+    	    break;
+        case 24:
+    	    mFormat = QImage::Format_RGB888;
+    	    break;
+        case 16:
+        default:
+    	    mFormat = QImage::Format_RGB16;
+    	    break;
+    }
+    mPhysicalSize = determinePhysicalSize(userMmSize, geometry.size());
+
+    // mmap the framebuffer
+    int pagemask = getpagesize() - 1;
+    mMmap.size = ((int) mBytesPerLine*geometry.height() + pagemask) & ~pagemask;
+    uchar *data = (unsigned char *)mmap(0, mMmap.size, PROT_READ | PROT_WRITE, MAP_SHARED, mFbFd, 0);
+    if ((long)data == -1) {
+        qErrnoWarning(errno, "Failed to mmap framebuffer");
+        return false;
+    }
+
+    mMmap.offset = geometry.y() * mBytesPerLine + geometry.x() * mDepth / 8;
+    mMmap.data = data + mMmap.offset;
+
+    QFbScreen::initializeCompositor();
+    mFbScreenImage = QImage(mMmap.data, geometry.width(), geometry.height(), mBytesPerLine, mFormat);
+
+    mCursor = new QFbCursor(this);
+
+    return true;
+}
+
+QRegion QScFbScreen::doRedraw()
+{
+    QRegion touched = QFbScreen::doRedraw();
+
+    if (touched.isEmpty())
+        return touched;
+
+    if (!mBlitter)
+        mBlitter = new QPainter(&mFbScreenImage);
+
+    QVector<QRect> rects = touched.rects();
+    for (int i = 0; i < rects.size(); i++)
+        mBlitter->drawImage(rects[i], *mScreenImage, rects[i]);
+    return touched;
+}
+
+// grabWindow() grabs "from the screen" not from the backingstores.
+// In scfb's case it will also include the mouse cursor.
+QPixmap QScFbScreen::grabWindow(WId wid, int x, int y, int width, int height) const
+{
+    if (!wid) {
+        if (width < 0)
+            width = mFbScreenImage.width() - x;
+        if (height < 0)
+            height = mFbScreenImage.height() - y;
+        return QPixmap::fromImage(mFbScreenImage).copy(x, y, width, height);
+    }
+
+    QFbWindow *window = windowForId(wid);
+    if (window) {
+        const QRect geom = window->geometry();
+        if (width < 0)
+            width = geom.width() - x;
+        if (height < 0)
+            height = geom.height() - y;
+        QRect rect(geom.topLeft() + QPoint(x, y), QSize(width, height));
+        rect &= window->geometry();
+        return QPixmap::fromImage(mFbScreenImage).copy(rect);
+    }
+
+    return QPixmap();
+}
+
+QT_END_NAMESPACE
+
diff -Naur src/plugins/platforms/scfb.orig/qscfbscreen.h src/plugins/platforms/scfb/qscfbscreen.h
--- src/plugins/platforms/scfb.orig/qscfbscreen.h	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/platforms/scfb/qscfbscreen.h	2015-11-09 22:42:44.622854000 -0800
@@ -0,0 +1,77 @@
+/****************************************************************************
+**
+** Copyright (C) 2015 The Qt Company Ltd.
+** Contact: http://www.qt.io/licensing/
+**
+** This file is part of the plugins of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see http://www.qt.io/terms-conditions. For further
+** information use the contact form at http://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** As a special exception, The Qt Company gives you certain additional
+** rights. These rights are described in The Qt Company LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QLINUXFBSCREEN_H
+#define QLINUXFBSCREEN_H
+
+#include <QtPlatformSupport/private/qfbscreen_p.h>
+
+QT_BEGIN_NAMESPACE
+
+class QPainter;
+class QFbCursor;
+
+class QScFbScreen : public QFbScreen
+{
+    Q_OBJECT
+public:
+    QScFbScreen(const QStringList &args);
+    ~QScFbScreen();
+
+    bool initialize();
+
+    QPixmap grabWindow(WId wid, int x, int y, int width, int height) const Q_DECL_OVERRIDE;
+
+    QRegion doRedraw() Q_DECL_OVERRIDE;
+
+private:
+    QStringList mArgs;
+    int mFbFd;
+    int mTtyFd;
+
+    QImage mFbScreenImage;
+    int mBytesPerLine;
+    int mOldTtyMode;
+
+    struct {
+        uchar *data;
+        int offset, size;
+    } mMmap;
+
+    QPainter *mBlitter;
+};
+
+QT_END_NAMESPACE
+
+#endif // QLINUXFBSCREEN_H
+
diff -Naur src/plugins/platforms/scfb.orig/scfb.json src/plugins/platforms/scfb/scfb.json
--- src/plugins/platforms/scfb.orig/scfb.json	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/platforms/scfb/scfb.json	2015-11-09 22:42:44.625710000 -0800
@@ -0,0 +1,3 @@
+{
+    "Keys": [ "scfb" ]
+}
diff -Naur src/plugins/platforms/scfb.orig/scfb.pro src/plugins/platforms/scfb/scfb.pro
--- src/plugins/platforms/scfb.orig/scfb.pro	1969-12-31 16:00:00.000000000 -0800
+++ src/plugins/platforms/scfb/scfb.pro	2015-11-09 22:42:44.622652000 -0800
@@ -0,0 +1,15 @@
+TARGET = qscfb
+
+PLUGIN_TYPE = platforms
+PLUGIN_CLASS_NAME = QScFbIntegrationPlugin
+!equals(TARGET, $$QT_DEFAULT_QPA_PLUGIN): PLUGIN_EXTENDS = -
+load(qt_plugin)
+
+QT += core-private gui-private platformsupport-private
+
+SOURCES = main.cpp qscfbintegration.cpp qscfbscreen.cpp
+HEADERS = qscfbintegration.h qscfbscreen.h
+
+CONFIG += qpa/genericunixfontdatabase
+
+OTHER_FILES += scfb.json
--- src/plugins/platforms/platforms.pro.orig	2016-03-08 12:37:36.150743000 -0800
+++ src/plugins/platforms/platforms.pro	2016-03-08 12:40:02.467734000 -0800
@@ -41,4 +41,8 @@
     SUBDIRS += haiku
 }
 
+freebsd {
+    SUBDIRS += scfb
+}
+
 contains(QT_CONFIG, mirclient): SUBDIRS += mirclient
